<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj&Lst\HXV176.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj&Lst\HXV176.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sat Dec 20 23:04:10 2014
<BR><P>
<H3>Maximum Stack Usage =       1288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
format &rArr; Fat32Format &rArr; InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[53d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[28f]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28f]">netconn_drain</a><BR>
 <LI><a href="#[dc]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dc]">NMI_Handler</a><BR>
 <LI><a href="#[e1]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">SVC_Handler</a><BR>
 <LI><a href="#[e2]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e2]">DebugMon_Handler</a><BR>
 <LI><a href="#[2b9]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b8]">lwip_sendto</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f7]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[114]">ADC3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">AddFileSystem</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[33]">AddReadyKernelThread</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[55]">Allocate</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[54]">AppendBuffer</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[10]">AppendDevice</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[78]">BeginInitialize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[df]">BusFault_Handler</a> from arch_stm.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fa]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fb]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[388]">CalculateThread</a> from fibonacci.o(.text) referenced from fibonacci.o(.text)
 <LI><a href="#[31]">CallThreadHook</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[40]">CancelSleep</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[83]">CancelTimer</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[12]">CheckPortRegion</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[9c]">ClsHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[9b]">ComDebug</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[17b]">ComIntHandler</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[144]">CommandParser</a> from shell.o(.text) referenced 6 times from shell.o(.text)
 <LI><a href="#[9]">ConChangeLine</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[6]">ConClearScreen</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[8]">ConGotoHome</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[a]">ConGotoPrev</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[3]">ConInitialize</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[7]">ConPrintCh</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[b]">ConPrintLine</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[5]">ConPrintStr</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[12c]">ConReadThread</a> from console.o(.text) referenced from console.o(.text)
 <LI><a href="#[4]">ConUninitialize</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[80]">ConnectInterrupt</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[92]">CpuHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[52]">CreateBuffer1</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[53]">CreateBuffer2</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[2a]">CreateDevice</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[35]">CreateKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[74]">CreateObject</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[f0]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f1]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f2]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f3]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f4]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f5]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f6]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11d]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11e]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11f]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[120]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9d]">DebugHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[e2]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12d]">DefaultDrvDispatch</a> from iomgr.o(.text) referenced from iomgr.o(.text)
 <LI><a href="#[12e]">DefaultOpen</a> from iomgr.o(.text) referenced from iomgr.o(.text)
 <LI><a href="#[11]">DeleteDevice</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[132]">DeleteFromQueue</a> from objqueue.o(.text) referenced from objqueue.o(.text)
 <LI><a href="#[59]">DestroyBuffer</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[2b]">DestroyDevice</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[36]">DestroyKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[77]">DestroyObject</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e]">DevMgrInitialize</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[6c]">DevObjInitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6d]">DevObjUninitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[18]">DimInitialize</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[81]">DisconnectInterrupt</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[7f]">DispatchException</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[7e]">DispatchInterrupt</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[6e]">DrcbInitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6f]">DrcbUninitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6a]">DrvObjInitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6b]">DrvObjUninitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[eb]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10d]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ec]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ed]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ee]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ef]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fc]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[79]">EndInitialize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[62]">EventInitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[63]">EventUninitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e9]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[115]">FSMC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[89]">Fibonacci</a> from fibonacci.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[56]">Free</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[98]">GUIHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[121]">GeneralIntHandler</a> from system.o(.text) referenced from osadapt.o(.text)
 <LI><a href="#[57]">GetBufferFlag</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[7b]">GetClockTickCounter</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[4f]">GetControlBlockFlag</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[4f]">GetControlBlockFlag</a> from mem_fbl.o(.text) referenced from mem_fbl.o(.text)
 <LI><a href="#[42]">GetCurrentIRQL</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[f]">GetDevice</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[76]">GetFirstObjectByType</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[133]">GetHeaderElement</a> from objqueue.o(.text) referenced from objqueue.o(.text)
 <LI><a href="#[43]">GetLastError</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[14c]">GetMail</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[75]">GetObjectByID</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[7d]">GetPhysicalMemorySize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[32]">GetScheduleKernelThread</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[7c]">GetSysTick</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[45]">GetThreadID</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[3d]">GetThreadPriority</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[46]">GetThreadStatus</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[dd]">HardFault_Handler</a> from arch_stm.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[91]">HlpHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[8a]">Hypertrm</a> from hypertrm.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[8b]">Hyptrm2</a> from hypertrm.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[105]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[104]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[107]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[106]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">IOControl</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[19]">IOManagerInitialize</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[51]">InitBufferMgr</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[5b]">InitModule</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[50]">Initialize</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[131]">InsertIntoQueue</a> from objqueue.o(.text) referenced from objqueue.o(.text)
 <LI><a href="#[17d]">IntRecv</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[17c]">IntSend</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[125]">Int_Entry_Wrapper</a> from osadapt.o(.text) referenced 2 times from osadapt.o(.text)
 <LI><a href="#[68]">InterruptInitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[69]">InterruptUninitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[95]">IoCtrlApp</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[141]">IoCtrlStart</a> from ioctrl_s.o(.text) referenced from shell.o(.text)
 <LI><a href="#[60]">KernelThreadInitialize</a> from ktmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[34]">KernelThreadMgrInit</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[61]">KernelThreadUninitialize</a> from ktmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[130]">KernelThreadWrapper</a> from ktmgr2.o(.text) referenced from ktmgr.o(.text)
 <LI><a href="#[2d]">LoadDriver</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[5d]">LoadExternalMod</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[97]">LoadappHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[4d]">LockKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[70]">MailboxInitialize</a> from synobj2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[71]">MailboxUninitialize</a> from synobj2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[8e]">MemHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[de]">MemManage_Handler</a> from arch_stm.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">MgrGetMessage</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[4a]">MgrPeekMessage</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[48]">MgrSendMessage</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[5a]">ModMgrInit</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[4c]">MsgQueueEmpty</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[4b]">MsgQueueFull</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[13c]">MultiWaitTimerHandler</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[64]">MutexInitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[65]">MutexUninitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[dc]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1de]">OnCancel</a> from iomgr2.o(.text) referenced from iomgr2.o(.text)
 <LI><a href="#[1dd]">OnCompletion</a> from iomgr2.o(.text) referenced from iomgr2.o(.text)
 <LI><a href="#[e6]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e3]">PendSV_Handler</a> from osadapt.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17a]">PollRecv</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[179]">PollSend</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[9a]">Poweroff</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[5e]">PriQueueInitialize</a> from objqueue.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[5f]">PriQueueUninitialize</a> from objqueue.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[143]">QueryCmdName</a> from shell.o(.text) referenced 6 times from shell.o(.text)
 <LI><a href="#[ea]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10e]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e8]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[99]">Reboot</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[2f]">RegisterFileSystem</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[13a]">ReleaseMutex</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[14]">ReleasePortRegion</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[148]">ReleaseSemaphore</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[5c]">ReplaceShell</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[13]">ReservePortRegion</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[2c]">ReserveResource</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[136]">ResetEvent</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[db]">Reset_Handler</a> from osadapt.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">ResumeKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[94]">RunTimeHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[85]">SDIODriverEntry</a> from sdio_drv.o(.text) referenced 2 times from drventry.o(.data)
 <LI><a href="#[18e]">SDIOIntHandler</a> from sdio_drv.o(.text) referenced from sdio_drv.o(.text)
 <LI><a href="#[116]">SDIO_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[108]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[109]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[118]">SPI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e1]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">ScheduleFromInt</a> from osadapt.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[39]">ScheduleFromProc</a> from osadapt.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[72]">SemInitialize</a> from synobj2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[73]">SemUninitialize</a> from synobj2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[15]">SendDeviceMessage</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[14b]">SendMail</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[58]">SetBufferFlag</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[41]">SetCurrentIRQL</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[135]">SetEvent</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[16]">SetFocusThread</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[44]">SetLastError</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[14a]">SetMailboxSize</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[147]">SetSemaphoreCount</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[17]">SetShellThread</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[30]">SetThreadHook</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[3c]">SetThreadPriority</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[47]">SetThreadStatus</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[82]">SetTimer</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[140]">ShellEntryPoint</a> from shell.o(.text) referenced from os_entry.o(.text)
 <LI><a href="#[3f]">Sleep</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[93]">SptHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[37]">SuspendKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[96]">SysDiagApp</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[142]">SysDiagStart</a> from sysd_s.o(.text) referenced from shell.o(.text)
 <LI><a href="#[8f]">SysInfoHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[90]">SysNameHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[e4]">SysTick_Handler</a> from osadapt.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13e]">SyscallHandler</a> from syscall.o(.text) referenced from system.o(.text)
 <LI><a href="#[13f]">SystemIdle</a> from idle.o(.text) referenced from os_entry.o(.text)
 <LI><a href="#[122]">SystemInit</a> from system_stm32f10x.o(.text) referenced 2 times from osadapt.o(.text)
 <LI><a href="#[7a]">SystemInitialize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[123]">System_Hard_Init</a> from osadapt.o(.text) referenced from osadapt.o(.text)
 <LI><a href="#[e7]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fd]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[100]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ff]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fe]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[101]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[102]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[103]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[117]">TIM5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11b]">TIM6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11c]">TIM7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[110]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[113]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[112]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[111]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">TerminalKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[66]">TimerInitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[13d]">TimerInterruptHandler</a> from system.o(.text) referenced from system.o(.text)
 <LI><a href="#[67]">TimerUninitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[119]">UART4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11a]">UART5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10a]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10b]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10c]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10f]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f8]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f9]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">UniSchedule</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[3b]">UniSchedule</a> from ktmgr.o(.text) referenced from osadapt.o(.text)
 <LI><a href="#[4e]">UnlockKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[e0]">UsageFault_Handler</a> from arch_stm.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[127]">UsartDestroy</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[12b]">UsartDeviceClose</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[12a]">UsartDeviceOpen</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[129]">UsartDeviceRead</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[128]">UsartDeviceWrite</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[84]">UsartDrvEntry</a> from usart.o(.text) referenced 2 times from drventry.o(.data)
 <LI><a href="#[126]">UsartIntHandler</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[8d]">VerHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[e5]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1dc]">WaitForCompletion</a> from iomgr2.o(.text) referenced from iomgr2.o(.text)
 <LI><a href="#[138]">WaitForEventObject</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[137]">WaitForEventObjectEx</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[12f]">WaitForKernelThreadObject</a> from ktmgr2.o(.text) referenced from ktmgr.o(.text)
 <LI><a href="#[149]">WaitForMailboxObject</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[139]">WaitForMutexObject</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[13b]">WaitForMutexObjectEx</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[145]">WaitForSemObject</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[146]">WaitForSemObjectEx</a> from synobj2.o(.text) referenced from synobj2.o(.text)
 <LI><a href="#[134]">WaitingTimerHandler</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[187]">WiFiDriverThreadEntry</a> from ethif.o(.text) referenced from ethif.o(.text)
 <LI><a href="#[1d]">_CloseFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1e]">_CreateDirectory</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1a]">_CreateFile</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1f]">_DeleteFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[20]">_FindClose</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[21]">_FindFirstFile</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[22]">_FindNextFile</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[29]">_FlushFileBuffers</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[23]">_GetFileAttributes</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[24]">_GetFileSize</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1b]">_ReadFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[25]">_RemoveDirectory</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[26]">_SetEndOfFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[28]">_SetFilePointer</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1c]">_WriteFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[199]">__main</a> from __main.o(!!!main) referenced 2 times from osadapt.o(.text)
 <LI><a href="#[193]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[167]">_hx_free</a> from sysmem.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[194]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[192]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[160]">accept_function</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[171]">arp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[cf]">assoc</a> from network.o(.text) referenced 2 times from network.o(.data)
 <LI><a href="#[d2]">beep</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[a9]">cd</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[d4]">cintperf</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[198]">cistpl_funce</a> from sdio_cis.o(.text) referenced from sdio_cis.o(.constdata)
 <LI><a href="#[197]">cistpl_manfid</a> from sdio_cis.o(.text) referenced from sdio_cis.o(.constdata)
 <LI><a href="#[196]">cistpl_vers_1</a> from sdio_cis.o(.text) referenced from sdio_cis.o(.constdata)
 <LI><a href="#[b1]">copy</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[d7]">cpuload</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[ad]">del</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[d6]">devinfo</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[d8]">devlist</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[168]">dhcp_recv</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[172]">dhcp_timer_coarse</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[173]">dhcp_timer_fine</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[a8]">dir</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[9e]">disklist</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[169]">dns_recv</a> from dns.o(.text) referenced from dns.o(.text)
 <LI><a href="#[174]">dns_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[150]">do_bind</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[157]">do_close</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[151]">do_connect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[15f]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[14e]">do_delconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[152]">do_disconnect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[161]">do_dns_found</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[14f]">do_getaddr</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[158]">do_gethostbyname</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[153]">do_listen</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[14d]">do_newconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[154]">do_recv</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[155]">do_send</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[156]">do_write</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[15b]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[184]">etharp_output</a> from etharp.o(.text) referenced from ethif.o(.text)
 <LI><a href="#[186]">ethernetif_init</a> from ethif.o(.text) referenced from ethif.o(.text)
 <LI><a href="#[162]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[a5]">exit</a> from fdisk.o(.text) referenced 10 times from fdisk.o(.data)
 <LI><a href="#[87]">fdiskEntry</a> from fdisk.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[a2]">format</a> from fdisk2.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[86]">fsEntry</a> from fs.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[a7]">fslist</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[c]">getch</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[d]">getchar</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[88]">heditEntry</a> from hedit.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[a6]">help</a> from fdisk.o(.text) referenced 10 times from fdisk.o(.data)
 <LI><a href="#[18f]">if_sdio_host_to_card</a> from if_sdio.o(.text) referenced from if_sdio.o(.text)
 <LI><a href="#[4bc]">if_sdio_interrupt</a> from if_sdio.o(.text) referenced from if_sdio.o(.text)
 <LI><a href="#[c9]">iflist</a> from network.o(.text) referenced 2 times from network.o(.data)
 <LI><a href="#[b5]">inputb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b7]">inputd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b8]">inputsb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b9]">inputsw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b6]">inputw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[170]">ip_reass_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[16a]">ipfrag_free_pbuf_custom</a> from ip_frag.o(.text) referenced from ip_frag.o(.text)
 <LI><a href="#[191]">lbs_cmd_async_callback</a> from cmd.o(.text) referenced 2 times from cmd.o(.text)
 <LI><a href="#[195]">lbs_cmd_copyback</a> from cmd.o(.text) referenced from cmd.o(i.lbs_cmd_with_response)
 <LI><a href="#[190]">lbs_ret_80211_scan</a> from scan.o(.text) referenced from scan.o(.text)
 <LI><a href="#[185]">low_level_output</a> from marvelif.o(.text) referenced from ethif.o(.text)
 <LI><a href="#[163]">lwip_getsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[164]">lwip_setsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[ab]">md</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[c5]">memalloc</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[d1]">memcheck</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[c2]">memrb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[c4]">memrd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[c6]">memrels</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[c3]">memrw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[bf]">memwb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[c1]">memwd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[c0]">memww</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[ac]">mkdir</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[188]">mmc_wait_done</a> from core.o(.text) referenced from core.o(.text)
 <LI><a href="#[321]">netif_loop_output</a> from netif.o(.text) referenced from netif.o(.text)
 <LI><a href="#[16c]">netif_loopif_init</a> from netif.o(.text) referenced from netif.o(.text)
 <LI><a href="#[332]">netif_poll</a> from netif.o(.text) referenced from netif.o(.text)
 <LI><a href="#[8c]">networkEntry</a> from network.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[ba]">outputb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[bc]">outputd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[bd]">outputsb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[be]">outputsw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[bb]">outputw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[d3]">overload</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[a3]">partadd</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[a4]">partdel</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[a0]">partlist</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[166]">pbuf_free_int</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[16d]">pbuf_free_ooseq</a> from pbuf.o(.text) referenced from pbuf.o(.text)
 <LI><a href="#[d5]">pcilist</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[a1]">pdevlist</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[ca]">ping</a> from network.o(.text) referenced 2 times from network.o(.data)
 <LI><a href="#[15a]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[ae]">rd</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[15d]">recv_raw</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[15c]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[15e]">recv_udp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[af]">ren</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[cb]">route</a> from network.o(.text) referenced 2 times from network.o(.data)
 <LI><a href="#[d0]">scan</a> from network.o(.text) referenced 2 times from network.o(.data)
 <LI><a href="#[159]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[ce]">showint</a> from network.o(.text) referenced 2 times from network.o(.data)
 <LI><a href="#[18c]">stm32_card_present</a> from s3cmci.o(.text) referenced from s3cmci.o(.text)
 <LI><a href="#[18d]">stm32_enable_sdio_irq</a> from s3cmci.o(.text) referenced from s3cmci.o(.text)
 <LI><a href="#[18b]">stm32_get_ro</a> from s3cmci.o(.text) referenced from s3cmci.o(.text)
 <LI><a href="#[189]">stm32_request</a> from s3cmci.o(.text) referenced from s3cmci.o(.text)
 <LI><a href="#[18a]">stm32_set_ios</a> from s3cmci.o(.text) referenced from s3cmci.o(.text)
 <LI><a href="#[16e]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[34f]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[16b]">tcpip_input</a> from tcpip.o(.text) referenced 2 times from netif.o(.text)
 <LI><a href="#[16f]">tcpip_tcp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[165]">tcpip_thread</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[b0]">type</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[9f]">use</a> from fdisk.o(.text) referenced 4 times from fdisk.o(.data)
 <LI><a href="#[aa]">vl</a> from fs.o(.text) referenced 2 times from fs.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[199]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[19c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[542]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[543]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[544]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[545]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[546]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[19d]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[532]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[547]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[548]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[549]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[54a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[54b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[54c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[54d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[54e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[54f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[550]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[551]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[552]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[553]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[554]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[555]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[556]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[557]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[558]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[559]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[55a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[55b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1aa]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[55c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[55d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[55e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[55f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[560]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[561]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[19b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[562]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1a2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[563]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1a6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __OS_Entry &rArr; IPv4_Entry &rArr; tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[564]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[53e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[565]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1ab]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[22d]"></a>HardwareInitialize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, arch_stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginInitialize
</UL>

<P><STRONG><a name="[566]"></a>EnableVMM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>InitKernelThreadContext</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
</UL>

<P><STRONG><a name="[567]"></a>__GetTsc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>__MicroDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
</UL>

<P><STRONG><a name="[568]"></a>__outd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[569]"></a>__ind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>__outb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputb
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort2
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort
</UL>

<P><STRONG><a name="[392]"></a>__inb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIntHandler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort2
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
</UL>

<P><STRONG><a name="[39c]"></a>__inw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
</UL>

<P><STRONG><a name="[39d]"></a>__outw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputw
</UL>

<P><STRONG><a name="[56a]"></a>__inws</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>__outws</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>HardFault_Handler</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, arch_stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HardFault_Handler &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemManage_Handler &rArr; SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BusFault_Handler &rArr; SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UsageFault_Handler &rArr; SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>CheckESP</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, arch_stm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>

<P><STRONG><a name="[1b6]"></a>ErrorHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hellocn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InformErrorHandler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmErrorHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImportantErrorHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CriticalErrorHandler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatalErrorHandler
</UL>

<P><STRONG><a name="[1b7]"></a>__BUG</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniSchedule
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimeOutWaiting
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiWaitTimerHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelWait
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainAllObjects
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitThisObject
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitingTimerHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemUninitialize
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUninitialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventUninitialize
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadHook
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallThreadHook
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReadyKernelThread
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForSemObjectEx
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIntHandler
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[123]"></a>System_Hard_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osadapt.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>Int_Entry_Wrapper</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> osadapt.o(.text)
<LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[1ba]"></a>Enter_Critical_Section</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrcbInitialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFileSystem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFileAttributes
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindClose
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNextFile
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFirstFile
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControl
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenFile
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterFileSystem
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShellThread
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocusThread
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceMessage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPortRegion
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceClose
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceOpen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceRead
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniSchedule
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterruptHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObject
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMutex
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitingTimerHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderElement
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFromQueue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoQueue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemUninitialize
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUninitialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxUninitialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventUninitialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyObject
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateObject
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForKernelThreadObject
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadHook
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelThreadWrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockKernelThread
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKernelThread
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrPeekMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrGetMessage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrSendMessage
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadPriority
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMailboxSize
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForSemObjectEx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForSemObject
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSemaphore
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[1c5]"></a>Leave_Critical_Section</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrcbInitialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFileSystem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFileAttributes
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindClose
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNextFile
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFirstFile
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControl
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenFile
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterFileSystem
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShellThread
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocusThread
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceMessage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPortRegion
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceClose
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceOpen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceRead
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniSchedule
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterruptHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObject
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMutex
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitingTimerHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderElement
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFromQueue
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoQueue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemUninitialize
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUninitialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxUninitialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventUninitialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyObject
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateObject
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForKernelThreadObject
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadHook
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelThreadWrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockKernelThread
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKernelThread
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrPeekMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrGetMessage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrSendMessage
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadPriority
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMailboxSize
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForSemObjectEx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForSemObject
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSemaphore
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[22f]"></a>EnableInterrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInitialize
</UL>

<P><STRONG><a name="[22e]"></a>DisableInterrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginInitialize
</UL>

<P><STRONG><a name="[3a]"></a>ScheduleFromInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>ScheduleFromProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>PendSV_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>SysTick_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osadapt.o(.text)
<LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[56c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>SER_PutChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>

<P><STRONG><a name="[1ad]"></a>SER_PutString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDrvEntry
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckESP
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[84]"></a>UsartDrvEntry</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UsartDrvEntry &rArr; InitializeUsart
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeUsart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drventry.o(.data)
</UL>
<P><STRONG><a name="[1dc]"></a>WaitForCompletion</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForCompletion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr2.o(.text)
</UL>
<P><STRONG><a name="[1dd]"></a>OnCompletion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnCompletion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr2.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>OnCancel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr2.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>DrcbInitialize</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrcbInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>DrcbUninitialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrcbUninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>DrvObjInitialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>DrvObjUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>DevObjInitialize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>DevObjUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>CreateNewFile</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateNewFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[1c]"></a>_WriteFile</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>_ReadFile</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _ReadFile &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>_CloseFile</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _CloseFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>_DeleteFile</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DeleteFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>_RemoveDirectory</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _RemoveDirectory
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>_SetEndOfFile</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetEndOfFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[201]"></a>CreateKernelThread</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateKernelThread
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[202]"></a>DestroyKernelThread</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyKernelThread
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[203]"></a>SetLastError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[204]"></a>GetLastError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[205]"></a>GetThreadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetThreadID
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[206]"></a>SetThreadPriority</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetThreadPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[207]"></a>GetMessage</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnComControl
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSend
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
</UL>

<P><STRONG><a name="[208]"></a>SendMessage</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showint
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliveryPacket
</UL>

<P><STRONG><a name="[209]"></a>Sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[20a]"></a>SetTimer</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[20b]"></a>CancelTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[20c]"></a>CreateEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[20d]"></a>DestroyEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
</UL>

<P><STRONG><a name="[20e]"></a>SetEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
</UL>

<P><STRONG><a name="[20f]"></a>ResetEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[210]"></a>CreateMutex</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[211]"></a>DestroyMutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[212]"></a>ReleaseMutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReleaseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[213]"></a>WaitForThisObject</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForThisObject
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[214]"></a>WaitForThisObjectEx</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForThisObjectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[215]"></a>ConnectInterrupt</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConnectInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[216]"></a>DisconnectInterrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisconnectInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[217]"></a>VirtualAlloc</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VirtualAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[218]"></a>VirtualFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ef]"></a>CreateFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CreateFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>

<P><STRONG><a name="[1f0]"></a>ReadFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
</UL>

<P><STRONG><a name="[219]"></a>WriteFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1f1]"></a>CloseFile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>

<P><STRONG><a name="[21a]"></a>CreateDirectory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CreateDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[21b]"></a>DeleteFile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeleteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[21c]"></a>FindFirstFile</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindFirstFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[21d]"></a>FindNextFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindNextFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[21e]"></a>FindClose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindClose
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[21f]"></a>GetFileAttributes</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFileAttributes
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[220]"></a>GetFileSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetFileSize
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[221]"></a>RemoveDirectory</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RemoveDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[222]"></a>SetEndOfFile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEndOfFile
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[223]"></a>IOControl</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IOControl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[224]"></a>SetFilePointer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFilePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[225]"></a>FlushFileBuffers</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlushFileBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[226]"></a>CreateDevice</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[227]"></a>DestroyDevice</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[39a]"></a>CreateRingBuff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateRingBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[399]"></a>GetRingBuffElement</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRingBuffElement
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
</UL>

<P><STRONG><a name="[398]"></a>AddRingBuffElement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddRingBuffElement
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIntHandler
</UL>

<P><STRONG><a name="[56d]"></a>SetRingBuffLength</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kapi.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>DestroyRingBuff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyRingBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[56e]"></a>Log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)

<P><STRONG><a name="[56f]"></a>Logk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kapi.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>Find0String</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Find0String
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>

<P><STRONG><a name="[1e3]"></a>SetBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>

<P><STRONG><a name="[1e4]"></a>UpdateMaxBlock</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UpdateMaxBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kFree
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>

<P><STRONG><a name="[1e1]"></a>_4kAllocate</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMaxBlock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find0String
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>

<P><STRONG><a name="[1e5]"></a>_4kFree</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMaxBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>

<P><STRONG><a name="[1d0]"></a>KMemAlloc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMgrInitialize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoQueue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxInitialize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateObject
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMailboxSize
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_CreateHisObj
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_calloc
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliveryPacket
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[1d2]"></a>KMemFree</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeRegion
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderElement
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFromQueue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriQueueUninitialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxUninitialize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxInitialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyObject
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMailboxSize
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_DeleteHisObj
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrels
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliveryPacket
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[570]"></a>GetFreeMemorySize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmemmgr.o(.text), UNUSED)

<P><STRONG><a name="[571]"></a>GetTotalMemorySize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmemmgr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>KernelThreadInitialize</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KernelThreadInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>KernelThreadUninitialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KernelThreadUninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>UniSchedule</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UniSchedule &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osadapt.o(.text)
<LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[572]"></a>DispatchMessage</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ktmgr.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>GetScheduleKernelThread</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetScheduleKernelThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>AddReadyKernelThread</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddReadyKernelThread &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>SetThreadHook</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetThreadHook &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>CallThreadHook</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CallThreadHook &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>KernelThreadWrapper</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KernelThreadWrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>WaitForKernelThreadObject</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForKernelThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>PriQueueInitialize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, objqueue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>PriQueueUninitialize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PriQueueUninitialize &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[1f4]"></a>TimeOutWaiting</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TimeOutWaiting &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMail
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForSemObjectEx
</UL>

<P><STRONG><a name="[62]"></a>EventInitialize</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>EventUninitialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EventUninitialize &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>MutexInitialize</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MutexInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>MutexUninitialize</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MutexUninitialize &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>WaitForMultipleObjects</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAny
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSynObject
</UL>

<P><STRONG><a name="[229]"></a>RegisterSystemCall</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegisterSystemCall
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[13e]"></a>SyscallHandler</STRONG> (Thumb, 1374 bytes, Stack size 48 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SyscallHandler &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushFileBuffers
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilePointer
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControl
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndOfFile
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveDirectory
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSize
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileAttributes
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindClose
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextFile
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstFile
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDirectory
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFree
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualAlloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMutex
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMutex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMutex
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyEvent
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEvent
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadPriority
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetThreadID
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastError
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLastError
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSystemCall
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchToModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>InterruptInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>InterruptUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>TimerInitialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>TimerUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>GeneralIntHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GeneralIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osadapt.o(.text)
</UL>
<P><STRONG><a name="[573]"></a>u64Add</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[574]"></a>u64Sub</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[575]"></a>EqualTo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>LessThan</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>MoreThan</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[578]"></a>u64RotateLeft</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[579]"></a>u64RotateRight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[57a]"></a>u64Div</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>u64Hex2Str</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u64Hex2Str &rArr; Hex2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
</UL>

<P><STRONG><a name="[13f]"></a>SystemIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, idle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_entry.o(.text)
</UL>
<P><STRONG><a name="[231]"></a>_hx_vsprintf</STRONG> (Thumb, 852 bytes, Stack size 72 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iaddr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaddr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[1ae]"></a>_hx_sprintf</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckESP
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultExcepHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultIntHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModMgrInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fslist
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partlist
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPartDev
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDisk
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
</UL>

<P><STRONG><a name="[237]"></a>_hx_printf</STRONG> (Thumb, 232 bytes, Stack size 168 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIODriverEntry
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoScan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_add_card
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_data_stream
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum_GJ
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
</UL>

<P><STRONG><a name="[57b]"></a>memcpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>

<P><STRONG><a name="[23a]"></a>memzero</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memzero &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
</UL>

<P><STRONG><a name="[24a]"></a>StrCmp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StrCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_SaveCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[1d8]"></a>StrLen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[1b9]"></a>Hex2Str</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Hex2Str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
</UL>

<P><STRONG><a name="[23f]"></a>Int2Str</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[1b1]"></a>PrintLine</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InformErrorHandler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmErrorHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImportantErrorHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CriticalErrorHandler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatalErrorHandler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultExcepHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultIntHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModMgrInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HlpHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SptHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagApp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlApp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDebug
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devinfo
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDevInfo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcilist
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDevInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overload
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrb
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memww
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrels
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputw
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputsb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSend
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fslist
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partaddusage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partlist
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdevlist
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPartDev
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disklist
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDisk
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatusage
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[1d9]"></a>StrCpy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_SaveCmd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_LoadHisCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disklist
</UL>

<P><STRONG><a name="[23d]"></a>ConvertToUper</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>

<P><STRONG><a name="[1ea]"></a>Str2Hex</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUper
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchModDesc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devinfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overload
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrb
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memww
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrels
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputw
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
</UL>

<P><STRONG><a name="[23e]"></a>FormString</STRONG> (Thumb, 230 bytes, Stack size 36 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeHandler
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDevInfo
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDevInfo
</UL>

<P><STRONG><a name="[1ee]"></a>ToCapital</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[1d7]"></a>strcmp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4e2]"></a>memcmp</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_2_code
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
</UL>

<P><STRONG><a name="[1cf]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintStr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtrim
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDebug
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_vers_1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
</UL>

<P><STRONG><a name="[1ec]"></a>strcpy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_vers_1
</UL>

<P><STRONG><a name="[1ed]"></a>strcat</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[240]"></a>strtrim</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strtrim
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
</UL>

<P><STRONG><a name="[241]"></a>__OS_Entry</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, os_entry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = __OS_Entry &rArr; IPv4_Entry &rArr; tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeadLoop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeEthernetIf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv4_Entry
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>main</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_entry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = main &rArr; __OS_Entry &rArr; IPv4_Entry &rArr; tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[140]"></a>ShellEntryPoint</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ShellEntryPoint &rArr; Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_SetCursorPos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_entry.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>VerHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VerHandler &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ChangeLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>MemHandler</STRONG> (Thumb, 166 bytes, Stack size 304 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = MemHandler &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>SysInfoHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysInfoHandler &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>HlpHandler</STRONG> (Thumb, 1214 bytes, Stack size 72 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HlpHandler &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>LoadappHandler</STRONG> (Thumb, 162 bytes, Stack size 144 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LoadappHandler &rArr; LoadBinModule &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteBinModule
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>GUIHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>SemInitialize</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SemInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>SemUninitialize</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SemUninitialize &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>MailboxInitialize</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MailboxInitialize &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>MailboxUninitialize</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MailboxUninitialize &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[251]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[258]"></a>netconn_delete</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[25a]"></a>netconn_getaddr</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[25d]"></a>netconn_bind</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[25e]"></a>netconn_connect</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[25f]"></a>netconn_disconnect</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[260]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[261]"></a>netconn_accept</STRONG> (Thumb, 746 bytes, Stack size 24 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[264]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[265]"></a>netconn_recv</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[267]"></a>netconn_recved</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[268]"></a>netconn_send</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[269]"></a>netconn_sendto</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[26a]"></a>netconn_write</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netconn_write &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[26c]"></a>netconn_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[26d]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[26e]"></a>netconn_gethostbyname</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[259]"></a>netconn_free</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netconn_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[252]"></a>netconn_alloc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netconn_alloc &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[14d]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>do_delconn</STRONG> (Thumb, 634 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>do_bind</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>do_connect</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>do_disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_disconnect &rArr; sys_sem_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>do_listen</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>do_send</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>do_recv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[156]"></a>do_write</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>do_getaddr</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_getaddr &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>do_close</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = do_close &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>do_gethostbyname</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = do_gethostbyname &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[2a1]"></a>netbuf_new</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
</UL>

<P><STRONG><a name="[276]"></a>netbuf_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[2a2]"></a>netbuf_alloc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[2a3]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[2a4]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[2a5]"></a>netbuf_chain</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>

<P><STRONG><a name="[2a7]"></a>netbuf_data</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>

<P><STRONG><a name="[2a8]"></a>netbuf_next</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>

<P><STRONG><a name="[2a9]"></a>netbuf_first</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>

<P><STRONG><a name="[31a]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2ad]"></a>lwip_accept</STRONG> (Thumb, 566 bytes, Stack size 64 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2af]"></a>lwip_bind</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2b1]"></a>lwip_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
</UL>

<P><STRONG><a name="[2b2]"></a>lwip_connect</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2b3]"></a>lwip_listen</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2b4]"></a>lwip_recvfrom</STRONG> (Thumb, 860 bytes, Stack size 96 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>

<P><STRONG><a name="[2b6]"></a>lwip_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[2b7]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[2b8]"></a>lwip_sendto</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwip_sendto &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[2b9]"></a>lwip_send</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[2ba]"></a>lwip_socket</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
</UL>

<P><STRONG><a name="[2bb]"></a>lwip_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[2be]"></a>lwip_select</STRONG> (Thumb, 934 bytes, Stack size 104 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>

<P><STRONG><a name="[2bf]"></a>lwip_shutdown</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2c1]"></a>lwip_getpeername</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[2c2]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[2c3]"></a>lwip_getsockopt</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2c4]"></a>lwip_setsockopt</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
</UL>

<P><STRONG><a name="[2c5]"></a>lwip_ioctl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2c6]"></a>lwip_fcntl</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[16b]"></a>tcpip_input</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcpip_input &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> netif.o(.text)
<LI> ethif.o(.text)
</UL>
<P><STRONG><a name="[270]"></a>tcpip_callback_with_block</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[2cd]"></a>tcpip_timeout</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[2ce]"></a>tcpip_untimeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[253]"></a>tcpip_apimsg</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[2cf]"></a>tcpip_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPv4_Entry
</UL>

<P><STRONG><a name="[2d2]"></a>pbuf_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[2d3]"></a>mem_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[25b]"></a>sys_arch_protect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_protect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[25c]"></a>sys_arch_unprotect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>

<P><STRONG><a name="[2d1]"></a>sys_thread_new</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[255]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[288]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[290]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_arch_mbox_tryfetch
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[262]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[275]"></a>sys_mbox_trypost</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_mbox_trypost
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[2cc]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
</UL>

<P><STRONG><a name="[257]"></a>sys_mbox_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[287]"></a>sys_mbox_new</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[254]"></a>sys_sem_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[286]"></a>sys_sem_set_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[271]"></a>sys_arch_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[278]"></a>sys_sem_signal</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[256]"></a>sys_sem_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[26f]"></a>sys_sem_new</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[3a1]"></a>sys_now</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>

<P><STRONG><a name="[318]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[243]"></a>IPv4_Entry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = IPv4_Entry &rArr; tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[2ae]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[2b0]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[2d5]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[2d4]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2ea]"></a>dhcp_renew</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[2ee]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[2f0]"></a>dhcp_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2f4]"></a>dhcp_fine_tmr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[2f7]"></a>dhcp_set_struct</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2f8]"></a>dhcp_cleanup</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>

<P><STRONG><a name="[2f9]"></a>dhcp_stop</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAssist
</UL>

<P><STRONG><a name="[2fb]"></a>dhcp_start</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[2fc]"></a>dhcp_inform</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2fd]"></a>dhcp_network_changed</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[2ff]"></a>dhcp_arp_reply</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[2f6]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[302]"></a>dns_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dns_init &rArr; ipaddr_addr &rArr; ipaddr_aton &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[57c]"></a>dns_getserver</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dns.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>dns_tmr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[2a0]"></a>dns_gethostbyname</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
</UL>

<P><STRONG><a name="[30a]"></a>icmp_input</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[312]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[313]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[314]"></a>inet_chksum_pseudo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[316]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>

<P><STRONG><a name="[30e]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[30d]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2d0]"></a>lwip_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lwip_init &rArr; netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[323]"></a>ip_route</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[31c]"></a>ip_debug_print</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2c9]"></a>ip_input</STRONG> (Thumb, 620 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_debug_print
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[30f]"></a>ip_output_if</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_debug_print
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[311]"></a>ip_output</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[30c]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[324]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[325]"></a>ipaddr_aton</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ipaddr_aton &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[303]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[327]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[326]"></a>ipaddr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIf
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>

<P><STRONG><a name="[32b]"></a>ip_reass_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[31d]"></a>ip_reass</STRONG> (Thumb, 798 bytes, Stack size 48 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ip_reass &rArr; ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[322]"></a>ip_frag</STRONG> (Thumb, 552 bytes, Stack size 96 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[332]"></a>netif_poll</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = netif_poll &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(.text)
</UL>
<P><STRONG><a name="[321]"></a>netif_loop_output</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = netif_loop_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(.text)
</UL>
<P><STRONG><a name="[2f2]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAssist
</UL>

<P><STRONG><a name="[2e3]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[2e4]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[2e2]"></a>netif_set_ipaddr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[334]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAssist
</UL>

<P><STRONG><a name="[335]"></a>netif_add</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[319]"></a>netif_init</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[337]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[2e1]"></a>netif_set_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAssist
</UL>

<P><STRONG><a name="[336]"></a>netif_remove</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = netif_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[57d]"></a>netif_find</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>netif_set_link_up</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[57e]"></a>netif_set_link_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>pbuf_free</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliveryPacket
</UL>

<P><STRONG><a name="[272]"></a>pbuf_alloc</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliveryPacket
</UL>

<P><STRONG><a name="[330]"></a>pbuf_alloced_custom</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pbuf_alloced_custom &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2de]"></a>pbuf_realloc</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[30b]"></a>pbuf_header</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_header &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[32a]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[331]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2a6]"></a>pbuf_cat</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_cat &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[33b]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[33c]"></a>pbuf_dechain</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[273]"></a>pbuf_copy</STRONG> (Thumb, 786 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_copy &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2b5]"></a>pbuf_copy_partial</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_copy_partial &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[33d]"></a>pbuf_take</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[33e]"></a>pbuf_coalesce</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[340]"></a>pbuf_get_at</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[33f]"></a>pbuf_memcmp</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[341]"></a>pbuf_memfind</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[342]"></a>pbuf_strstr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[31e]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[294]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[297]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[28b]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[29d]"></a>raw_sendto</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[29c]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[292]"></a>raw_remove</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = raw_remove &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[28a]"></a>raw_new</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = raw_new &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[317]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[343]"></a>tcp_seg_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[339]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[344]"></a>tcp_pcb_purge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[345]"></a>tcp_slowtmr</STRONG> (Thumb, 1384 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[34a]"></a>tcp_pcb_remove</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[283]"></a>tcp_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[34e]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[277]"></a>tcp_recved</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[34f]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[350]"></a>tcp_fasttmr</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[351]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[284]"></a>tcp_shutdown</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[352]"></a>tcp_abandon</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[291]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[296]"></a>tcp_bind</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[29b]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[354]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[355]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[299]"></a>tcp_connect</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[57f]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>tcp_seg_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tcp_seg_copy &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[35a]"></a>tcp_alloc</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[28e]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[27d]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[27f]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[280]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[282]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[27e]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[281]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[580]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>tcp_input</STRONG> (Thumb, 1882 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[356]"></a>tcp_enqueue_flags</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[34d]"></a>tcp_send_fin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[27a]"></a>tcp_write</STRONG> (Thumb, 1552 bytes, Stack size 104 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[35e]"></a>tcp_send_empty_ack</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[27b]"></a>tcp_output</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[349]"></a>tcp_rst</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[347]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[361]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[35d]"></a>tcp_rexmit_fast</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[348]"></a>tcp_keepalive</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[346]"></a>tcp_zero_window_probe</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2ca]"></a>sys_timeout</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sys_timeout &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[34c]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[31b]"></a>sys_timeouts_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2cb]"></a>sys_untimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_untimeout &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[2c7]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[31f]"></a>udp_input</STRONG> (Thumb, 664 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[295]"></a>udp_bind</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_bind &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[2df]"></a>udp_sendto_if</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[29f]"></a>udp_sendto</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[29e]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[298]"></a>udp_connect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[29a]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[28d]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[293]"></a>udp_remove</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = udp_remove &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[28c]"></a>udp_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = udp_new &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[369]"></a>etharp_tmr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = etharp_tmr &rArr; free_entry &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[36e]"></a>etharp_find_addr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[333]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2e6]"></a>etharp_query</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[184]"></a>etharp_output</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethif.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>ethernet_input</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[266]"></a>_hx_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[167]"></a>_hx_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[371]"></a>_hx_calloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sysmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[373]"></a>atol</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, atox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atol
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[376]"></a>atoi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, atox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atoi &rArr; atol
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[377]"></a>itoa</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, atox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
</UL>

<P><STRONG><a name="[a2]"></a>format</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = format &rArr; Fat32Format &rArr; InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatusage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>fdiskEntry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fdiskEntry &rArr; Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[388]"></a>CalculateThread</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fibonacci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculateThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fibonacci.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>Fibonacci</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, fibonacci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Fibonacci &rArr; CreateKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Str
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>fsEntry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fsEntry &rArr; Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>heditEntry</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = heditEntry &rArr; __UserInput &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEditFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>Hypertrm</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hypertrm &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyEvent
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>Hyptrm2</STRONG> (Thumb, 784 bytes, Stack size 112 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Hyptrm2 &rArr; CreateKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyRingBuff
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRingBuff
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyEvent
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEvent
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>IoCtrlStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IoCtrlStart &rArr; Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[3a2]"></a>ping_Entry</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, network2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ping_Entry &rArr; ping_recv &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[8c]"></a>networkEntry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = networkEntry &rArr; Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>SysDiagStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SysDiagStart &rArr; Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[244]"></a>InitializeEthernetIf</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ethif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitializeEthernetIf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[249]"></a>FormParameterObj</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[24b]"></a>ReleaseParameterObj</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReleaseParameterObj &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[24c]"></a>Shell_Msg_Loop</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Shell_Msg_Loop &rArr; OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ChangeLine
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_DeleteHisObj
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_CreateHisObj
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyControl
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPrompt
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagStart
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;networkEntry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
</UL>

<P><STRONG><a name="[24d]"></a>CD_ChangeLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_ChangeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
</UL>

<P><STRONG><a name="[23c]"></a>CD_PrintString</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ChangeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackChar
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPrompt
</UL>

<P><STRONG><a name="[1b8]"></a>PrintStr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[3bd]"></a>CD_Clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[242]"></a>ClearScreen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClearScreen &rArr; CD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[3b9]"></a>CD_PrintChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputChar
</UL>

<P><STRONG><a name="[228]"></a>PrintCh</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintCh &rArr; CD_PrintChar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InProcess
</UL>

<P><STRONG><a name="[3be]"></a>CD_GotoHome</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_GotoHome
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
</UL>

<P><STRONG><a name="[238]"></a>GotoHome</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GotoHome &rArr; CD_GotoHome
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_GotoHome
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[239]"></a>ChangeLine</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChangeLine &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ChangeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[3bf]"></a>CD_GotoPrev</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CD_GotoPrev
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
</UL>

<P><STRONG><a name="[38c]"></a>GotoPrev</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chardisplay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GotoPrev &rArr; CD_GotoPrev
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_GotoPrev
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
</UL>

<P><STRONG><a name="[581]"></a>CD_InitDisplay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[582]"></a>CD_SetDisplayMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[583]"></a>CD_GetDisPlayRang</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[584]"></a>CD_GetCursorPos</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>CD_SetCursorPos</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
</UL>

<P><STRONG><a name="[585]"></a>CD_GetString</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[586]"></a>CD_DelString</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[587]"></a>CD_DelChar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chardisplay.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>His_CreateHisObj</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hiscmd .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = His_CreateHisObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>

<P><STRONG><a name="[3bc]"></a>His_DeleteHisObj</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hiscmd .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = His_DeleteHisObj &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>

<P><STRONG><a name="[3b6]"></a>His_SaveCmd</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, hiscmd .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = His_SaveCmd &rArr; StrCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
</UL>

<P><STRONG><a name="[3b1]"></a>His_LoadHisCmd</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hiscmd .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
</UL>

<P><STRONG><a name="[dc]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[53d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c2]"></a>wpa_printf</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wpa_printf &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_enckey
</UL>

<P><STRONG><a name="[3c3]"></a>wpa_hexdump_key</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wpa_hexdump_key &rArr; _wpa_hexdump &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_enckey
</UL>

<P><STRONG><a name="[3c4]"></a>wpa_hexdump</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
</UL>

<P><STRONG><a name="[588]"></a>void_dbg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>PTR_ERR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>

<P><STRONG><a name="[506]"></a>IS_ERR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>

<P><STRONG><a name="[505]"></a>ERR_PTR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[3c5]"></a>lbs_hex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_802_11d_domain_info
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11d_domain_info
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_domain_info_11d
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_channel_known_11d
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_bt_access
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_send_confirmsleep
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
</UL>

<P><STRONG><a name="[3dd]"></a>mmc_delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mmc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[3c7]"></a>ms_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[3c6]"></a>mdelay</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[3c8]"></a>time_after</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = time_after
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[3c9]"></a>snprintf</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>

<P><STRONG><a name="[3ca]"></a>print_ssid</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = print_ssid &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isprint
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[406]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[42d]"></a>mmc_align_data_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
</UL>

<P><STRONG><a name="[3d0]"></a>mmc_request_done</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_request
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
</UL>

<P><STRONG><a name="[3d1]"></a>mmc_set_chip_select</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_chip_select &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
</UL>

<P><STRONG><a name="[3d3]"></a>mmc_set_clock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_clock &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[3d4]"></a>mmc_set_bus_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_bus_mode &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[3d5]"></a>mmc_set_bus_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_bus_width &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
</UL>

<P><STRONG><a name="[42f]"></a>mmc_set_data_timeout</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmc_set_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[3d6]"></a>mmc_wait_for_req</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_start_request
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
</UL>

<P><STRONG><a name="[3d8]"></a>mmc_wait_for_cmd</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_req
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_select_card
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
</UL>

<P><STRONG><a name="[3d9]"></a>mmc_set_timing</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_timing &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_hs
</UL>

<P><STRONG><a name="[3de]"></a>mmc_go_idle</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mmc_go_idle &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_chip_select
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_delay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[3df]"></a>mmc_select_voltage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_select_voltage &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[3e0]"></a>mmc_rescan</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mmc_rescan &rArr; mmc_attach_sdio &rArr; mmc_sdio_init_card &rArr; sdio_read_common_cis &rArr; sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>

<P><STRONG><a name="[3e4]"></a>mmc_alloc_card</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmc_alloc_card &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[3e5]"></a>mmc_add_card</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mmc_add_card &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[3e6]"></a>mmc_alloc_host</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mmc_alloc_host &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
</UL>

<P><STRONG><a name="[3e7]"></a>sdio_alloc_func</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sdio_alloc_func &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
</UL>

<P><STRONG><a name="[428]"></a>sdio_add_func</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[3e8]"></a>sdio_enable_func</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_enable_func &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[3ea]"></a>sdio_claim_irq</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_claim_irq &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_card_irq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[3ee]"></a>sdio_set_block_size</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_set_block_size &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
</UL>

<P><STRONG><a name="[3ef]"></a>sdio_bus_probe</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = sdio_bus_probe &rArr; if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_device
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>

<P><STRONG><a name="[3f3]"></a>EnableIrq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EnableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
</UL>

<P><STRONG><a name="[3f5]"></a>DisableIrq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DisableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_disable_irq
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
</UL>

<P><STRONG><a name="[416]"></a>stm32_irq</STRONG> (Thumb, 740 bytes, Stack size 32 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = stm32_irq &rArr; pio_tasklet &rArr; finalize_request &rArr; stm32_send_request &rArr; mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_imask
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOIntHandler
</UL>

<P><STRONG><a name="[417]"></a>stm32_probe</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_probe &rArr; EnableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32_struct
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_host
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>

<P><STRONG><a name="[3e9]"></a>mmc_io_rw_direct</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_hs
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_cd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[3cf]"></a>sdio_irq_thread</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sdio_irq_thread &rArr; process_sdio_pending_irqs &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
</UL>

<P><STRONG><a name="[3e2]"></a>mmc_send_io_op_cond</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mmc_send_io_op_cond &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_delay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[3e1]"></a>mmc_send_if_cond</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mmc_send_if_cond &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[41c]"></a>mmc_send_relative_addr</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mmc_send_relative_addr &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[425]"></a>mmc_select_card</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mmc_select_card &rArr; _mmc_select_card &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[3e3]"></a>mmc_attach_sdio</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mmc_attach_sdio &rArr; mmc_sdio_init_card &rArr; sdio_read_common_cis &rArr; sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_cd
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_add_func
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_add_card
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[429]"></a>sdio_readb</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_sdio_interrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_rx_len
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
</UL>

<P><STRONG><a name="[42a]"></a>sdio_writeb</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>

<P><STRONG><a name="[42b]"></a>sdio_align_size</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdio_align_size
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_max_byte_size
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_align_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[42e]"></a>mmc_io_rw_extended</STRONG> (Thumb, 286 bytes, Stack size 144 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_req
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_data_timeout
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>

<P><STRONG><a name="[430]"></a>sdio_io_rw_ext_helper</STRONG> (Thumb, 472 bytes, Stack size 80 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_power2
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_max_byte_size
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[427]"></a>sdio_read_common_cis</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sdio_read_common_cis &rArr; sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[41f]"></a>sdio_read_func_cis</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sdio_read_func_cis &rArr; sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
</UL>

<P><STRONG><a name="[438]"></a>RCC_Configuration</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>

<P><STRONG><a name="[44a]"></a>EnableSDIOClk</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableSDIOClk
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIODriverEntry
</UL>

<P><STRONG><a name="[44b]"></a>watch_dog_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>

<P><STRONG><a name="[450]"></a>NVIC_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>

<P><STRONG><a name="[452]"></a>GPIO_Configuration</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[454]"></a>SDIO_GPIO_Configuration</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDIO_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIODriverEntry
</UL>

<P><STRONG><a name="[455]"></a>adc_init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>

<P><STRONG><a name="[460]"></a>get_adcval</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>

<P><STRONG><a name="[462]"></a>USART_Configuration</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>

<P><STRONG><a name="[466]"></a>enable_timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[468]"></a>disable_timer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[469]"></a>timerbase_config</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[46d]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[46e]"></a>send_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
</UL>

<P><STRONG><a name="[471]"></a>get_char</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
</UL>

<P><STRONG><a name="[473]"></a>Uart_GetKey</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[474]"></a>Uart_SendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[475]"></a>Uart_GetString</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetIntNum_GJ
</UL>

<P><STRONG><a name="[476]"></a>Uart_GetIntNum_GJ</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetString
</UL>

<P><STRONG><a name="[589]"></a>dbg_void</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32sys.o(.text), UNUSED)

<P><STRONG><a name="[58a]"></a>print_void</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32sys.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>debug_data_stream</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_card_rx
</UL>

<P><STRONG><a name="[478]"></a>write_flash</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[58b]"></a>read_flash</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32sys.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>SDIODriverEntry</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sdio_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SDIODriverEntry &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GPIO_Configuration
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSDIOClk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drventry.o(.data)
</UL>
<P><STRONG><a name="[4a6]"></a>lbs_adhoc_stop</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lbs_adhoc_stop &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4ad]"></a>lbs_cmd_80211_deauthenticate</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lbs_cmd_80211_deauthenticate &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4ae]"></a>print_enckey</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = print_enckey &rArr; wpa_hexdump_key &rArr; _wpa_hexdump &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4af]"></a>lbs_association_worker</STRONG> (Thumb, 732 bytes, Stack size 96 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ssid
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_enckey
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_80211_deauthenticate
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_stop
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_stop_adhoc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_deauth_infrastructure
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_ie
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_mode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>

<P><STRONG><a name="[4b0]"></a>marvel_assoc_open_network</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = marvel_assoc_open_network &rArr; lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_network
</UL>

<P><STRONG><a name="[4bb]"></a>if_sdio_send_data</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = if_sdio_send_data &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPhysicalSend
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hard_start_xmit
</UL>

<P><STRONG><a name="[4bc]"></a>if_sdio_interrupt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_host_to_card_done
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_card_rx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(.text)
</UL>
<P><STRONG><a name="[3f0]"></a>if_sdio_probe</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
</UL>

<P><STRONG><a name="[4c3]"></a>poll_sdio_interrupt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = poll_sdio_interrupt &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_card_rx
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[4c4]"></a>wireless_card_rx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_sdio_interrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_data_stream
</UL>

<P><STRONG><a name="[4c5]"></a>wireless_card_tx</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hard_start_xmit
</UL>

<P><STRONG><a name="[4c9]"></a>init_marvell_driver</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, marvell_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = init_marvell_driver &rArr; sdio_bus_probe &rArr; if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareInit
</UL>

<P><STRONG><a name="[4ca]"></a>marvel_assoc_network</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, marvell_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = marvel_assoc_network &rArr; marvel_assoc_open_network &rArr; lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAssoc
</UL>

<P><STRONG><a name="[4cb]"></a>lbs_scan_worker</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, marvell_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = lbs_scan_worker &rArr; lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareInit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoScan
</UL>

<P><STRONG><a name="[4cc]"></a>lbs_rev_pkt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, marvell_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lbs_rev_pkt &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_sdio_interrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[4c6]"></a>lbs_hard_start_xmit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_L2_send_pkt
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wireless_card_tx
</UL>

<P><STRONG><a name="[4ce]"></a>wpa_L2_send_pkt</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hard_start_xmit
</UL>

<P><STRONG><a name="[4cf]"></a>lbs_ps_wakeup</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[4d0]"></a>lbs_ps_sleep</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[4d1]"></a>init_sleep_mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4d2]"></a>lbs_send_confirmsleep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>

<P><STRONG><a name="[4a9]"></a>lbs_scan_networks</STRONG> (Thumb, 784 bytes, Stack size 56 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bss_descriptor
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_create_channel_list
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_send_specific_ssid_scan
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_worker
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
</UL>

<P><STRONG><a name="[48f]"></a>lbs_ssid_cmp</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lbs_ssid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_beacon_bss
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_stop_adhoc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[4e3]"></a>find_beacon_bss</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
</UL>

<P><STRONG><a name="[4e4]"></a>lbs_send_specific_ssid_scan</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[58c]"></a>lbs_fw_index_to_data_rate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, marvel_main.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>lbs_thread</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_command_response
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_event
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_notify_command_response
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_host_to_card_done
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_cmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[4eb]"></a>lbs_notify_command_response</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, marvel_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[4bd]"></a>lbs_host_to_card_done</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lbs_host_to_card_done &rArr; lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>

<P><STRONG><a name="[58d]"></a>lbs_process_event</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, marvel_main.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>lbs_add_card</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = lbs_add_card &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[4c2]"></a>lbs_start_card</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = lbs_start_card &rArr; lbs_setup_firmware &rArr; lbs_update_hw_spec &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_11d
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[4f5]"></a>lbs_get_region_cfp_table</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_chan_supported_11d
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_regiontable
</UL>

<P><STRONG><a name="[4f4]"></a>lbs_set_regiontable</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lbs_set_regiontable &rArr; lbs_get_region_cfp_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
</UL>

<P><STRONG><a name="[4f6]"></a>lbs_queue_event</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, marvel_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[4b8]"></a>lbs_process_rxed_packet</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_data
</UL>

<P><STRONG><a name="[4cd]"></a>wait_for_data_end</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hard_start_xmit
</UL>

<P><STRONG><a name="[4ef]"></a>lbs_allocate_cmd_buffer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lbs_allocate_cmd_buffer &rArr; lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cleanup_and_insert_cmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[195]"></a>lbs_cmd_copyback</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lbs_cmd_copyback
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(i.lbs_cmd_with_response)
</UL>
<P><STRONG><a name="[4df]"></a>__lbs_cmd</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_ERR
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ERR
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_sdio_interrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>

<P><STRONG><a name="[4f2]"></a>lbs_get_tx_power</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lbs_get_tx_power &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
</UL>

<P><STRONG><a name="[508]"></a>lbs_cmd_async</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lbs_cmd_async &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_sdio_interrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
</UL>

<P><STRONG><a name="[49f]"></a>lbs_set_mac_control</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lbs_set_mac_control &rArr; lbs_cmd_async &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
</UL>

<P><STRONG><a name="[4f1]"></a>lbs_update_hw_spec</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lbs_update_hw_spec &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_universaltable
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_regiontable
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
</UL>

<P><STRONG><a name="[4e8]"></a>lbs_complete_command</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_command_response
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[4e7]"></a>lbs_process_command_response</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[4ea]"></a>lbs_execute_next_command</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lbs_execute_next_command &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_submit_command
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_command_allowed_in_ps
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[490]"></a>lbs_prepare_and_send_command</STRONG> (Thumb, 566 bytes, Stack size 56 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_bcn_ctrl
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_fwt_access
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_bt_access
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_rssi
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_monitor_mode
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_reg_access
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_ps_mode
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cleanup_and_insert_cmd
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_sdio_interrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_domain_info_11d
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ps_sleep
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ps_wakeup
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[518]"></a>lbs_get_channel</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lbs_get_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_channel
</UL>

<P><STRONG><a name="[49a]"></a>lbs_update_channel</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = lbs_update_channel &rArr; lbs_get_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
</UL>

<P><STRONG><a name="[49b]"></a>lbs_set_channel</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lbs_set_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
</UL>

<P><STRONG><a name="[49e]"></a>lbs_cmd_802_11_set_wep</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lbs_cmd_802_11_set_wep &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
</UL>

<P><STRONG><a name="[4a1]"></a>lbs_cmd_802_11_enable_rsn</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lbs_cmd_802_11_enable_rsn &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
</UL>

<P><STRONG><a name="[4a4]"></a>lbs_cmd_802_11_key_material</STRONG> (Thumb, 306 bytes, Stack size 160 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = lbs_cmd_802_11_key_material &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_one_wpa_key
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
</UL>

<P><STRONG><a name="[489]"></a>lbs_set_radio</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
</UL>

<P><STRONG><a name="[498]"></a>lbs_set_snmp_mib</STRONG> (Thumb, 124 bytes, Stack size 168 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lbs_set_snmp_mib &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_mode
</UL>

<P><STRONG><a name="[58e]"></a>lbs_chan_2_freq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, 11d.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>lbs_get_scan_type_11d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_channel_known_11d
</UL>

<P><STRONG><a name="[4f3]"></a>lbs_init_11d</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lbs_init_11d
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
</UL>

<P><STRONG><a name="[50a]"></a>lbs_set_universaltable</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
</UL>

<P><STRONG><a name="[527]"></a>lbs_cmd_802_11d_domain_info</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[528]"></a>lbs_ret_802_11d_domain_info</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>

<P><STRONG><a name="[487]"></a>lbs_parse_dnld_countryinfo_11d</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_domain_info_11d
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_domain_info_11d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[529]"></a>lbs_create_dnld_countryinfo_11d</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_domain_info_11d
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_generate_parsed_region_chan_11d
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_domain_info_11d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3aa]"></a>PrepareInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, marvelif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = PrepareInit &rArr; init_marvell_driver &rArr; sdio_bus_probe &rArr; if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_worker
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_network
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[3a8]"></a>low_level_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, marvelif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[3ab]"></a>DoPhysicalSend</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, marvelif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DoPhysicalSend &rArr; if_sdio_send_data &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[185]"></a>low_level_output</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, marvelif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = low_level_output &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethif.o(.text)
</UL>
<P><STRONG><a name="[3a7]"></a>low_level_input</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, marvelif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = low_level_input &rArr; lbs_rev_pkt &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[3ad]"></a>DoAssoc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, marvelif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = DoAssoc &rArr; marvel_assoc_network &rArr; marvel_assoc_open_network &rArr; lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_network
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[3ac]"></a>DoScan</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, marvelif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = DoScan &rArr; lbs_scan_worker &rArr; lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_worker
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[3cb]"></a>isprint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isprint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isprint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ssid
</UL>

<P><STRONG><a name="[51d]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_2_code
</UL>

<P><STRONG><a name="[3cc]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ssid
</UL>

<P><STRONG><a name="[539]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[53a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[19e]"></a>_printf_int_oct</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[58f]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>__printf</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFile
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtrim
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_SaveCmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11d_domain_info
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_copyback
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_one_wpa_key
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_fwt_access
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliveryPacket
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_send_specific_ssid_scan
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_chanlist_tlv
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_ssid_tlv
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hard_start_xmit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_cmd
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_ie
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[533]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[590]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
</UL>

<P><STRONG><a name="[534]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[591]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[592]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[593]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[594]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4ee]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_calloc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_create_dnld_countryinfo_11d
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_fwt_access
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_11d
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sleep_mode
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hard_start_xmit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_ie
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[537]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[536]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMailboxSize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_select_card
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_alloc_func
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_host
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_card
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_create_dnld_countryinfo_11d
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_channel
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bss_descriptor
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_snmp_mib
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_channel
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[595]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[596]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[538]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[248]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryCmdName
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryCmdName
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryCmdName
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryCmdName
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryCmdName
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryCmdName
</UL>

<P><STRONG><a name="[597]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[598]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52c]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isprint
</UL>

<P><STRONG><a name="[52f]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[52d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[52e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[192]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[59a]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[59b]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[535]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[59c]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[59d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[59e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1a8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ac]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[59f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[5a0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[5a1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[45e]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[461]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adcval
</UL>

<P><STRONG><a name="[45c]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[457]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[458]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[45b]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[45f]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[45d]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[3fe]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>

<P><STRONG><a name="[3ff]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[456]"></a>DMA_DeInit</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[408]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
</UL>

<P><STRONG><a name="[400]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[47a]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[47b]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[540]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[47d]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[440]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[47c]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[43f]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[479]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[53f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[453]"></a>GPIO_Init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GPIO_Configuration
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[44f]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[44d]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[44e]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[44c]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[3f4]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[451]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[442]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[449]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSDIOClk
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[448]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSDIOClk
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[447]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSDIOClk
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[439]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[541]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[444]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[446]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[43c]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[43a]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[43e]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[43d]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[443]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[441]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[445]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[43b]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[405]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[413]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
</UL>

<P><STRONG><a name="[404]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[403]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[3f7]"></a>SDIO_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_imask
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
</UL>

<P><STRONG><a name="[411]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_clk
</UL>

<P><STRONG><a name="[3fc]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_command
</UL>

<P><STRONG><a name="[412]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
</UL>

<P><STRONG><a name="[467]"></a>TIM_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
</UL>

<P><STRONG><a name="[46c]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
</UL>

<P><STRONG><a name="[46b]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_PrescalerConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
</UL>

<P><STRONG><a name="[46a]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
</UL>

<P><STRONG><a name="[463]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[465]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[470]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetKey
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>

<P><STRONG><a name="[464]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[472]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetKey
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_char
</UL>

<P><STRONG><a name="[46f]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_char
</UL>

<P><STRONG><a name="[531]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4a3]"></a>clear_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, assoc.o(i.clear_bit))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
</UL>

<P><STRONG><a name="[483]"></a>lbs_cmd_with_response</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, cmd.o(i.lbs_cmd_with_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_channel
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_tx_power
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_snmp_mib
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_channel
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_enable_rsn
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_80211_deauthenticate
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_stop
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
</UL>

<P><STRONG><a name="[49c]"></a>set_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, assoc.o(i.set_bit))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
</UL>

<P><STRONG><a name="[495]"></a>test_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, assoc.o(i.test_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_stop_adhoc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_deauth_infrastructure
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
</UL>

<P><STRONG><a name="[193]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b0]"></a>FatalErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[1b2]"></a>CriticalErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[1b3]"></a>ImportantErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[1b4]"></a>AlarmErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[1b5]"></a>InformErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[1bc]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1bb]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1c9]"></a>EnableTransferCompleteInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
</UL>

<P><STRONG><a name="[1bf]"></a>DisableTransferCompleteInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
</UL>

<P><STRONG><a name="[1c6]"></a>IsTransferCompleteInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[1c1]"></a>IsTransferEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LLSend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
</UL>

<P><STRONG><a name="[1c0]"></a>SendUsartByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LLSend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
</UL>

<P><STRONG><a name="[1c7]"></a>IsReceiveInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[1c4]"></a>IsDataAvailable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
</UL>

<P><STRONG><a name="[1c3]"></a>GetUsartByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
</UL>

<P><STRONG><a name="[1cb]"></a>InitializeUsart</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitializeUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDrvEntry
</UL>

<P><STRONG><a name="[127]"></a>UsartDestroy</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsartDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[1be]"></a>TCIntHandler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TCIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUsartByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransferEnable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableTransferCompleteInt
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[1c2]"></a>DAIntHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartByte
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAvailable
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[126]"></a>UsartIntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsartIntHandler &rArr; DAIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReceiveInt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransferCompleteInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>UsartDeviceRead</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartDeviceRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[1c8]"></a>__LLSend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __LLSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUsartByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransferEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
</UL>

<P><STRONG><a name="[1ca]"></a>DeleteWriteDrcb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeleteWriteDrcb
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
</UL>

<P><STRONG><a name="[128]"></a>UsartDeviceWrite</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UsartDeviceWrite &rArr; __LLSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteWriteDrcb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LLSend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTransferCompleteInt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>UsartDeviceOpen</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsartDeviceOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>UsartDeviceClose</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsartDeviceClose
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>__SER_PutChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, console.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>

<P><STRONG><a name="[1cd]"></a>__Init_Default_Usart</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, console.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>

<P><STRONG><a name="[1cc]"></a>__LL_Output</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Init_Default_Usart
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SER_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConGotoPrev
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConChangeLine
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConGotoHome
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintCh
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintStr
</UL>

<P><STRONG><a name="[12c]"></a>ConReadThread</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConReadThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>ConInitialize</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ConUninitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConUninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ConPrintStr</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConPrintStr &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ConClearScreen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, console.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ConPrintCh</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConPrintCh &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ConGotoHome</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConGotoHome &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ConChangeLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConChangeLine &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ConGotoPrev</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConGotoPrev &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ConPrintLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ConPrintLine &rArr; ConPrintStr &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConChangeLine
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConGotoHome
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>getch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>getchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, console.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>DevMgrInitialize</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DevMgrInitialize &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>InsertIntoList</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InsertIntoList
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
</UL>

<P><STRONG><a name="[1d1]"></a>MergeRegion</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MergeRegion &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
</UL>

<P><STRONG><a name="[13]"></a>ReservePortRegion</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReservePortRegion &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoList
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ReleasePortRegion</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ReleasePortRegion &rArr; MergeRegion &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeRegion
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoList
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CheckPortRegion</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckPortRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[1d4]"></a>DeviceIdMatch</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceIdMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
</UL>

<P><STRONG><a name="[f]"></a>GetDevice</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetDevice &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIdMatch
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>AppendDevice</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>DeleteDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, devmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>DimInitialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DimInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>SendDeviceMessage</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendDeviceMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>SetFocusThread</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFocusThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>SetShellThread</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetShellThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[1da]"></a>ToCapital</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[2f]"></a>RegisterFileSystem</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegisterFileSystem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>IOManagerInitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1d5]"></a>__OpenFile</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __OpenFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[1d6]"></a>__OpenDevice</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __OpenDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[1a]"></a>_CreateFile</STRONG> (Thumb, 224 bytes, Stack size 544 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _CreateFile &rArr; __OpenFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>IOControl</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IOControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>_CreateDirectory</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _CreateDirectory
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>_FindFirstFile</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FindFirstFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>_FindNextFile</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FindNextFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>_FindClose</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FindClose
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>_GetFileAttributes</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetFileAttributes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>_GetFileSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>_SetFilePointer</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetFilePointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>_FlushFileBuffers</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _FlushFileBuffers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>CreateDevice</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CreateDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>DestroyDevice</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DestroyDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>DefaultDrvDispatch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>DefaultOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>LoadDriver</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>AddFileSystem</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddFileSystem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ReserveResource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1e0]"></a>ToCapital</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
</UL>

<P><STRONG><a name="[34]"></a>KernelThreadMgrInit</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KernelThreadMgrInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>CreateKernelThread</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CreateKernelThread &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKernelThreadContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>DestroyKernelThread</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DestroyKernelThread &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>SuspendKernelThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>ResumeKernelThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>SetThreadPriority</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetThreadPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>GetThreadPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>TerminalKernelThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Sleep</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sleep &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>CancelSleep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>SetCurrentIRQL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>GetCurrentIRQL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>SetLastError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>GetLastError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>GetThreadID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>GetThreadStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>SetThreadStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>MsgQueueFull</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrSendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>MsgQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrPeekMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrGetMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>MgrSendMessage</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MgrSendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgQueueFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>MgrGetMessage</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MgrGetMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgQueueEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>MgrPeekMessage</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MgrPeekMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgQueueEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LockKernelThread</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LockKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>UnlockKernelThread</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnlockKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>CreateBuffer1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>CreateBuffer2</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateBuffer2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>Allocate</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Allocate &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[1e8]"></a>CombineNeighbor</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CombineNeighbor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
</UL>

<P><STRONG><a name="[1e7]"></a>ReleaseAndCombine</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineNeighbor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendBuffer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free
</UL>

<P><STRONG><a name="[56]"></a>Free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Free &rArr; ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>AppendBuffer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AppendBuffer &rArr; ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>GetBufferFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBufferFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>SetBufferFlag</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetBufferFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>DestroyBuffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>GetControlBlockFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> mem_fbl.o(.text)
<LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>InitBufferMgr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>Initialize</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Initialize &rArr; AppendBuffer &rArr; ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>InitModule</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitModule
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModMgrInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>ModMgrInit</STRONG> (Thumb, 76 bytes, Stack size 144 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ModMgrInit &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>ReplaceShell</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[1e9]"></a>FetchModDesc</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FetchModDesc &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[1eb]"></a>LoadModule</STRONG> (Thumb, 224 bytes, Stack size 224 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LoadModule &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[1f3]"></a>FetchLine</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FetchLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[1f2]"></a>IsLineValid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[5d]"></a>LoadExternalMod</STRONG> (Thumb, 234 bytes, Stack size 208 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = LoadExternalMod &rArr; LoadModule &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLineValid
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchLine
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchModDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>CreateObject</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CreateObject &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>GetObjectByID</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetObjectByID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>GetFirstObjectByType</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFirstObjectByType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>DestroyObject</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DestroyObject &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>InsertIntoQueue</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InsertIntoQueue &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objqueue.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>DeleteFromQueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeleteFromQueue &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objqueue.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>GetHeaderElement</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetHeaderElement &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objqueue.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>WaitingTimerHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WaitingTimerHandler &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>WaitForEventObject</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForEventObject
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>WaitForEventObjectEx</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WaitForEventObjectEx &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>ResetEvent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ResetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>SetEvent</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>ReleaseMutex</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReleaseMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>WaitForMutexObject</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForMutexObject
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>WaitForMutexObjectEx</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WaitForMutexObjectEx &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[1ff]"></a>IsSynObject</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMultipleObjects
</UL>

<P><STRONG><a name="[1f6]"></a>ObjectIsSignal</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTheseObjects
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectsAreSignal
</UL>

<P><STRONG><a name="[1f5]"></a>ObjectsAreSignal</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectIsSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1f7]"></a>WaitThisObject</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTheseObjects
</UL>

<P><STRONG><a name="[1f8]"></a>WaitTheseObjects</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitThisObject
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectIsSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1f9]"></a>ObtainAllObjects</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1fa]"></a>CancelWait</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CancelWait &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiWaitTimerHandler
</UL>

<P><STRONG><a name="[13c]"></a>MultiWaitTimerHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MultiWaitTimerHandler &rArr; CancelWait &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>MultiTimeOutWaiting</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1fd]"></a>ClearMultipleWaitStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1fc]"></a>WaitForAll</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMultipleWaitStatus
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimeOutWaiting
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelWait
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainAllObjects
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTheseObjects
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectsAreSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMultipleObjects
</UL>

<P><STRONG><a name="[200]"></a>WaitForAny</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMultipleObjects
</UL>

<P><STRONG><a name="[22a]"></a>DispatchToModule</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DispatchToModule
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[13d]"></a>TimerInterruptHandler</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimerInterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>ConnectInterrupt</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConnectInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>DisconnectInterrupt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisconnectInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>SystemInitialize</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>GetClockTickCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>GetSysTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>GetPhysicalMemorySize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[22b]"></a>DefaultIntHandler</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DefaultIntHandler &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchInterrupt
</UL>

<P><STRONG><a name="[7e]"></a>DispatchInterrupt</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DispatchInterrupt &rArr; DefaultIntHandler &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[22c]"></a>DefaultExcepHandler</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>

<P><STRONG><a name="[7f]"></a>DispatchException</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DispatchException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>SetTimer</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>CancelTimer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>BeginInitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BeginInitialize &rArr; HardwareInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>EndInitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EndInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[233]"></a>strnlen</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
</UL>

<P><STRONG><a name="[232]"></a>skip_atoi</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
</UL>

<P><STRONG><a name="[234]"></a>number</STRONG> (Thumb, 344 bytes, Stack size 104 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = number
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
</UL>

<P><STRONG><a name="[235]"></a>eaddr</STRONG> (Thumb, 168 bytes, Stack size 52 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
</UL>

<P><STRONG><a name="[236]"></a>iaddr</STRONG> (Thumb, 282 bytes, Stack size 52 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_vsprintf
</UL>

<P><STRONG><a name="[245]"></a>DeadLoop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_entry.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[9b]"></a>ComDebug</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ComDebug &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>SysNameHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SysNameHandler &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>IoCtrlApp</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IoCtrlApp &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>SysDiagApp</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysDiagApp &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>ClsHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClsHandler &rArr; ClearScreen &rArr; CD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_SetCursorPos
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>Reboot</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reboot &rArr; ClsHandler &rArr; ClearScreen &rArr; CD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>Poweroff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>RunTimeHandler</STRONG> (Thumb, 224 bytes, Stack size 240 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RunTimeHandler &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>CpuHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CpuHandler &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>SptHandler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SptHandler &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>DebugHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>QueryCmdName</STRONG> (Thumb, 886 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueryCmdName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>CommandParser</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>LoadBinModule</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoadBinModule &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>

<P><STRONG><a name="[24f]"></a>ExecuteBinModule</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ExecuteBinModule
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>

<P><STRONG><a name="[147]"></a>SetSemaphoreCount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSemaphoreCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>ReleaseSemaphore</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReleaseSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>WaitForSemObject</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForSemObject
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>WaitForSemObjectEx</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WaitForSemObjectEx &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>WaitForMailboxObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, synobj2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>SetMailboxSize</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetMailboxSize &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>GetMail</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetMail &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[250]"></a>__SendMail</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __SendMail
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMail
</UL>

<P><STRONG><a name="[14b]"></a>SendMail</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, synobj2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SendMail &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SendMail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj2.o(.text)
</UL>
<P><STRONG><a name="[263]"></a>netconn_recv_data</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[26b]"></a>netconn_close_shutdown</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[15d]"></a>recv_raw</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>recv_udp</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>recv_tcp</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>err_tcp</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = err_tcp &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[279]"></a>do_writemore</STRONG> (Thumb, 900 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[159]"></a>sent_tcp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[27c]"></a>do_close_internal</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[15a]"></a>poll_tcp</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[285]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[160]"></a>accept_function</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[289]"></a>pcb_new</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[28f]"></a>netconn_drain</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[15f]"></a>do_connected</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = do_connected &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>do_dns_found</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = do_dns_found &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[2ac]"></a>get_socket</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[2bd]"></a>tryget_socket</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[2aa]"></a>alloc_socket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alloc_socket &rArr; sys_arch_unprotect
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[2ab]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[162]"></a>event_callback</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = event_callback &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[2bc]"></a>lwip_selscan</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[2c0]"></a>lwip_getaddrname</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[163]"></a>lwip_getsockopt_internal</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_getsockopt_internal &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_setsockopt_internal &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>tcpip_thread</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>pbuf_free_int</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[2d6]"></a>dhcp_delete_msg</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2d7]"></a>dhcp_option_trailer</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dhcp_option_trailer &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2d8]"></a>dhcp_option_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dhcp_option_byte &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2d9]"></a>dhcp_option</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dhcp_option &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2da]"></a>dhcp_option_short</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dhcp_option_short &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2db]"></a>dhcp_create_msg</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2dd]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2dc]"></a>dhcp_discover</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[2e0]"></a>dhcp_handle_nak</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2e5]"></a>dhcp_check</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2e7]"></a>dhcp_option_long</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dhcp_option_long &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[2e8]"></a>dhcp_select</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[2e9]"></a>dhcp_handle_offer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2eb]"></a>dhcp_t1_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[2ec]"></a>dhcp_rebind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[2ed]"></a>dhcp_t2_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[2ef]"></a>dhcp_reboot</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2f1]"></a>dhcp_bind</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2f3]"></a>dhcp_timeout</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[2f5]"></a>dhcp_handle_ack</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2fa]"></a>dhcp_parse_reply</STRONG> (Thumb, 1226 bytes, Stack size 80 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[168]"></a>dhcp_recv</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text)
</UL>
<P><STRONG><a name="[2fe]"></a>dhcp_decline</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[301]"></a>dns_parse_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[300]"></a>dns_compare_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[169]"></a>dns_recv</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.text)
</UL>
<P><STRONG><a name="[304]"></a>dns_send</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[305]"></a>dns_check_entry</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[306]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[308]"></a>dns_lookup</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[309]"></a>dns_enqueue</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[310]"></a>icmp_send_response</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[315]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[328]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ip_reass_dequeue_datagram &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[329]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[32c]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[32d]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[32e]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; _hx_malloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[32f]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[16a]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>netif_loopif_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>pbuf_free_ooseq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text)
</UL>
<P><STRONG><a name="[33a]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[34b]"></a>tcp_close_shutdown</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[353]"></a>tcp_new_port</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[16e]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[358]"></a>tcp_kill_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[359]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[35b]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[35c]"></a>tcp_receive</STRONG> (Thumb, 3318 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[35f]"></a>tcp_parseopt</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[360]"></a>tcp_process</STRONG> (Thumb, 1516 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[362]"></a>tcp_listen_input</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[363]"></a>tcp_timewait_input</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[364]"></a>tcp_output_alloc_header</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[365]"></a>tcp_create_segment</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[366]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[367]"></a>tcp_write_checks</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcp_write_checks &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[368]"></a>tcp_output_segment</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[16f]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>ip_reass_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; free_entry &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>dhcp_timer_coarse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>dhcp_timer_fine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>dns_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[36a]"></a>free_entry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = free_entry &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[36b]"></a>find_entry</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = find_entry &rArr; free_entry &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[36c]"></a>etharp_send_ip</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = etharp_send_ip &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[36d]"></a>update_arp_entry</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_entry &rArr; pbuf_free &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[36f]"></a>etharp_arp_input</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[370]"></a>etharp_raw</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[374]"></a>isspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, atox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>

<P><STRONG><a name="[375]"></a>isdigit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, atox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>

<P><STRONG><a name="[37e]"></a>GetSecPerClus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fdisk2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
</UL>

<P><STRONG><a name="[37f]"></a>FatSize32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FatSize32
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
</UL>

<P><STRONG><a name="[378]"></a>ReadDeviceSector</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, fdisk2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>

<P><STRONG><a name="[379]"></a>WriteDeviceSector</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
</UL>

<P><STRONG><a name="[37a]"></a>InProcess</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InProcess &rArr; PrintCh &rArr; CD_PrintChar
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
</UL>

<P><STRONG><a name="[37b]"></a>InitFat_Root</STRONG> (Thumb, 314 bytes, Stack size 568 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InProcess
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
</UL>

<P><STRONG><a name="[37c]"></a>formatusage</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = formatusage &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[37d]"></a>Fat32Format</STRONG> (Thumb, 210 bytes, Stack size 552 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = Fat32Format &rArr; InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InProcess
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatSize32
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecPerClus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[387]"></a>LBAtoCHS</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LBAtoCHS
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[381]"></a>ReadDeviceSector</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
</UL>

<P><STRONG><a name="[382]"></a>WriteDeviceSector</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[175]"></a>QueryCmdName</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueryCmdName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>CommandParser</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exit &rArr; memzero &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = help &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[383]"></a>DumpDisk</STRONG> (Thumb, 40 bytes, Stack size 272 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DumpDisk &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disklist
</UL>

<P><STRONG><a name="[9e]"></a>disklist</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = disklist &rArr; DumpDisk &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[384]"></a>DumpPartDev</STRONG> (Thumb, 42 bytes, Stack size 152 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DumpPartDev &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdevlist
</UL>

<P><STRONG><a name="[a1]"></a>pdevlist</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pdevlist &rArr; DumpPartDev &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPartDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[385]"></a>IsValidPte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fdisk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
</UL>

<P><STRONG><a name="[9f]"></a>use</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = use &rArr; ReadDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPte
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>partlist</STRONG> (Thumb, 508 bytes, Stack size 280 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = partlist &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[386]"></a>partaddusage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = partaddusage &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[a3]"></a>partadd</STRONG> (Thumb, 348 bytes, Stack size 544 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = partadd &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partaddusage
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBAtoCHS
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>partdel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fdisk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>QueryCmdName</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueryCmdName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>CommandParser</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exit &rArr; memzero &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = help &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>fslist</STRONG> (Thumb, 98 bytes, Stack size 112 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = fslist &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[389]"></a>PrintDir</STRONG> (Thumb, 54 bytes, Stack size 144 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PrintDir &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[a8]"></a>dir</STRONG> (Thumb, 116 bytes, Stack size 336 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = dir &rArr; PrintDir &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>cd</STRONG> (Thumb, 190 bytes, Stack size 272 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = cd &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>md</STRONG> (Thumb, 78 bytes, Stack size 264 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = md &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>mkdir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mkdir &rArr; md &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>del</STRONG> (Thumb, 74 bytes, Stack size 272 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = del &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>rd</STRONG> (Thumb, 74 bytes, Stack size 272 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rd &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>ren</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>vl</STRONG> (Thumb, 912 bytes, Stack size 416 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vl &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>type</STRONG> (Thumb, 242 bytes, Stack size 416 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = type &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>copy</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = copy &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>use</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = use &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[38a]"></a>init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[38e]"></a>CreateEditFile</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CreateEditFile
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
</UL>

<P><STRONG><a name="[38b]"></a>__UserInput</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __UserInput &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
</UL>

<P><STRONG><a name="[38d]"></a>__VersionInfo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __VersionInfo &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
</UL>

<P><STRONG><a name="[38f]"></a>InitComPort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitComPort
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
</UL>

<P><STRONG><a name="[391]"></a>ComSendByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MicroDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSend
</UL>

<P><STRONG><a name="[394]"></a>ComRecvByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MicroDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
</UL>

<P><STRONG><a name="[179]"></a>PollSend</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PollSend &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>PollRecv</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PollRecv &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[395]"></a>InitComPort2</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitComPort2
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[396]"></a>ComSendByte2</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hypertrm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>

<P><STRONG><a name="[397]"></a>ComRecvByte2</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hypertrm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
</UL>

<P><STRONG><a name="[17b]"></a>ComIntHandler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ComIntHandler &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRingBuffElement
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>IntSend</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IntSend &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[17d]"></a>IntRecv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IntRecv &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRingBuffElement
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>CommandParser</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>QueryCmdName</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueryCmdName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>inputb</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inputb &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>inputw</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inputw &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inw
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>inputd</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inputd &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>inputsb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inputsb &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>inputsw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>outputb</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = outputb &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>outputw</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = outputw &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outw
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>outputd</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = outputd &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>outputsb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>outputsw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>memalloc</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = memalloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>memrels</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = memrels &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>memwb</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = memwb &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>memww</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = memww &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>memwd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = memwd &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>memrb</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = memrb &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>memrw</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = memrw &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>memrd</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memrd &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>help</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = help &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[39e]"></a>ping_prepare_echo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, network2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[39f]"></a>ping_send</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, network2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ping_send &rArr; lwip_sendto &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_free
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
</UL>

<P><STRONG><a name="[3a0]"></a>ping_recv</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, network2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ping_recv &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
</UL>

<P><STRONG><a name="[180]"></a>QueryCmdName</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueryCmdName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>CommandParser</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, network.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = help &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>route</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, network.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>ping</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ping &rArr; ping_Entry &rArr; ping_recv &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_Entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[3a3]"></a>ShowIf</STRONG> (Thumb, 130 bytes, Stack size 144 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ShowIf &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_sprintf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iflist
</UL>

<P><STRONG><a name="[c9]"></a>iflist</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = iflist &rArr; ShowIf &rArr; _hx_sprintf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowIf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>showint</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = showint &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>assoc</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = assoc &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>scan</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = scan &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[183]"></a>CommandParser</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>QueryCmdName</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueryCmdName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysd_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>memcheck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysd_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = help &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>cintperf</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cintperf &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Hex2Str
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>overload</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = overload &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>beep</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = beep &rArr; PrintLine &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[3a4]"></a>OutputDevInfo</STRONG> (Thumb, 122 bytes, Stack size 128 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OutputDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcilist
</UL>

<P><STRONG><a name="[d5]"></a>pcilist</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pcilist &rArr; OutputDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDevInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[3a5]"></a>PrintDevInfo</STRONG> (Thumb, 840 bytes, Stack size 144 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PrintDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devinfo
</UL>

<P><STRONG><a name="[d6]"></a>devinfo</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = devinfo &rArr; PrintDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDevInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>cpuload</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpuload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>devlist</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = devlist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[3a6]"></a>ethernetif_input</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ethif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; lbs_rev_pkt &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[186]"></a>ethernetif_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ethif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ethernetif_init &rArr; __BUG &rArr; PrintStr &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethif.o(.text)
</UL>
<P><STRONG><a name="[3a9]"></a>dhcpAssist</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ethif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dhcpAssist &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; _hx_free &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiDriverThreadEntry
</UL>

<P><STRONG><a name="[187]"></a>WiFiDriverThreadEntry</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, ethif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = WiFiDriverThreadEntry &rArr; PrepareInit &rArr; init_marvell_driver &rArr; sdio_bus_probe &rArr; if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareInit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoScan
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPhysicalSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAssoc
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAssist
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethif.o(.text)
</UL>
<P><STRONG><a name="[3ae]"></a>PrintPrompt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintPrompt &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
</UL>

<P><STRONG><a name="[3af]"></a>BackChar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BackChar &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnBackSpace
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
</UL>

<P><STRONG><a name="[3b0]"></a>LoadHisCmd</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_LoadHisCmd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackChar
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnComControl
</UL>

<P><STRONG><a name="[3b3]"></a>FindSub</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindSub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
</UL>

<P><STRONG><a name="[3b2]"></a>OnAutoComplete</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OnAutoComplete &rArr; BackChar &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSub
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackChar
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnComControl
</UL>

<P><STRONG><a name="[3b4]"></a>OnComControl</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAutoComplete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadHisCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyControl
</UL>

<P><STRONG><a name="[3b5]"></a>OnInputReturn</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OnInputReturn &rArr; His_SaveCmd &rArr; StrCmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintString
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtrim
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_ChangeLine
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_SaveCmd
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPrompt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyControl
</UL>

<P><STRONG><a name="[3b7]"></a>OnBackSpace</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OnBackSpace &rArr; BackChar &rArr; CD_PrintString &rArr; CD_ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyControl
</UL>

<P><STRONG><a name="[3b8]"></a>OnInputChar</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnInputChar &rArr; CD_PrintChar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CD_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnKeyControl
</UL>

<P><STRONG><a name="[3ba]"></a>OnKeyControl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, shell_help_smt32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OnKeyControl &rArr; OnComControl &rArr; LoadHisCmd &rArr; His_LoadHisCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputChar
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnBackSpace
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnInputReturn
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnComControl
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Msg_Loop
</UL>

<P><STRONG><a name="[3c0]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[3c1]"></a>_wpa_hexdump</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _wpa_hexdump &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
</UL>

<P><STRONG><a name="[3cd]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[3ce]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[3db]"></a>ffs</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_voltage
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[3dc]"></a>fls</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[3d2]"></a>mmc_set_ios</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_voltage
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_timing
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_width
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_mode
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_clock
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_chip_select
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[3d7]"></a>mmc_start_request</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmc_start_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_req
</UL>

<P><STRONG><a name="[188]"></a>mmc_wait_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> core.o(.text)
</UL>
<P><STRONG><a name="[3da]"></a>mmc_power_up</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_power_up &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffs
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[3eb]"></a>sdio_card_irq_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
</UL>

<P><STRONG><a name="[3ed]"></a>sdio_match_one</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_device
</UL>

<P><STRONG><a name="[3ec]"></a>sdio_match_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdio_match_device
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_one
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
</UL>

<P><STRONG><a name="[3f1]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, s3cmci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[3f2]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mmc_signal_sdio_irq &rArr; sdio_irq_thread &rArr; process_sdio_pending_irqs &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>

<P><STRONG><a name="[40f]"></a>udelay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[414]"></a>readl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[415]"></a>writel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[40b]"></a>stm32_host_usedma</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[3f6]"></a>enable_imask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enable_imask
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_command
</UL>

<P><STRONG><a name="[3f8]"></a>disable_imask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disable_imask
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[40c]"></a>clear_imask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[40d]"></a>stm32_check_sdio_irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[3f9]"></a>stm32_enable_irq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_enable_irq &rArr; DisableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
</UL>

<P><STRONG><a name="[3fa]"></a>stm32_disable_irq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_disable_irq &rArr; DisableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[3fb]"></a>stm32_send_command</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32_send_command &rArr; enable_imask
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
</UL>

<P><STRONG><a name="[3fd]"></a>DMA_RxConfiguration</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[401]"></a>DMA_TxConfiguration</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[402]"></a>stm32_setup_data</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = stm32_setup_data &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
</UL>

<P><STRONG><a name="[407]"></a>stm32_enable_dma</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_enable_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>

<P><STRONG><a name="[409]"></a>stm32_send_request</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = stm32_send_request &rArr; mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_command
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_request
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[40a]"></a>finalize_request</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = finalize_request &rArr; stm32_send_request &rArr; mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_check_sdio_irq
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_imask
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_host_usedma
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[40e]"></a>pio_tasklet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pio_tasklet &rArr; finalize_request &rArr; stm32_send_request &rArr; mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_disable_irq
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_imask
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>

<P><STRONG><a name="[18c]"></a>stm32_card_present</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>stm32_request</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = stm32_request &rArr; stm32_send_request &rArr; mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_card_present
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(.text)
</UL>
<P><STRONG><a name="[410]"></a>stm32_set_clk</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_set_clk &rArr; SDIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
</UL>

<P><STRONG><a name="[18a]"></a>stm32_set_ios</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = stm32_set_ios &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_clk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>stm32_get_ro</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(.text)
</UL>
<P><STRONG><a name="[18d]"></a>stm32_enable_sdio_irq</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, s3cmci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = stm32_enable_sdio_irq &rArr; DisableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_check_sdio_irq
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_imask
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writel
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(.text)
</UL>
<P><STRONG><a name="[418]"></a>init_stm32_struct</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, s3cmci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
</UL>

<P><STRONG><a name="[419]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[41a]"></a>process_sdio_pending_irqs</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = process_sdio_pending_irqs &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[41b]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[41d]"></a>sdio_read_fbr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_read_fbr &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
</UL>

<P><STRONG><a name="[41e]"></a>sdio_init_func</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = sdio_init_func &rArr; sdio_read_func_cis &rArr; sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_func_cis
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_alloc_func
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[420]"></a>sdio_read_cccr</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sdio_read_cccr &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[421]"></a>sdio_disable_cd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_disable_cd &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[422]"></a>sdio_enable_hs</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_enable_hs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_timing
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[423]"></a>sdio_enable_wide</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_enable_wide &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[424]"></a>_mmc_select_card</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _mmc_select_card &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_card
</UL>

<P><STRONG><a name="[426]"></a>mmc_sdio_init_card</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mmc_sdio_init_card &rArr; sdio_read_common_cis &rArr; sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_card
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_hs
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_card
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_mode
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[42c]"></a>sdio_max_byte_size</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
</UL>

<P><STRONG><a name="[431]"></a>align_power2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>

<P><STRONG><a name="[432]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdio_cis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[433]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdio_cis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[196]"></a>cistpl_vers_1</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cistpl_vers_1 &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_cis.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>cistpl_manfid</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cistpl_manfid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_cis.o(.constdata)
</UL>
<P><STRONG><a name="[435]"></a>cistpl_funce_whitelisted</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdio_cis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
</UL>

<P><STRONG><a name="[436]"></a>cistpl_funce_common</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cistpl_funce_common
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce
</UL>

<P><STRONG><a name="[434]"></a>cistpl_funce_func</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cistpl_funce_func
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_whitelisted
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce
</UL>

<P><STRONG><a name="[198]"></a>cistpl_funce</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cistpl_funce &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_cis.o(.constdata)
</UL>
<P><STRONG><a name="[437]"></a>sdio_read_cis</STRONG> (Thumb, 474 bytes, Stack size 72 bytes, sdio_cis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sdio_read_cis &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_func_cis
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
</UL>

<P><STRONG><a name="[18e]"></a>SDIOIntHandler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sdio_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SDIOIntHandler &rArr; stm32_irq &rArr; pio_tasklet &rArr; finalize_request &rArr; stm32_send_request &rArr; mmc_request_done &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_drv.o(.text)
</UL>
<P><STRONG><a name="[47e]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, assoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[47f]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, assoc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[48c]"></a>compare_ether_addr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_bssid_in_list
</UL>

<P><STRONG><a name="[480]"></a>get_common_rates</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_common_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[486]"></a>lbs_set_basic_rate_flags</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, assoc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[482]"></a>iw_auth_to_ieee_auth</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, assoc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
</UL>

<P><STRONG><a name="[481]"></a>lbs_set_authentication</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lbs_set_authentication &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iw_auth_to_ieee_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
</UL>

<P><STRONG><a name="[484]"></a>lbs_assoc_post</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lbs_assoc_post &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[485]"></a>lbs_associate</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iw_auth_to_ieee_auth
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_basic_rate_flags
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
</UL>

<P><STRONG><a name="[488]"></a>lbs_try_associate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[48a]"></a>is_network_compatible</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = is_network_compatible &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_ssid_in_list
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_bssid_in_list
</UL>

<P><STRONG><a name="[48b]"></a>lbs_find_bssid_in_list</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lbs_find_bssid_in_list &rArr; is_network_compatible &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[48d]"></a>lbs_adhoc_post</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lbs_adhoc_post
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[48e]"></a>lbs_adhoc_join</STRONG> (Thumb, 664 bytes, Stack size 152 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lbs_adhoc_join &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_basic_rate_flags
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[491]"></a>assoc_helper_bssid</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = assoc_helper_bssid &rArr; lbs_adhoc_join &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_bssid_in_list
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
</UL>

<P><STRONG><a name="[492]"></a>lbs_find_ssid_in_list</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lbs_find_ssid_in_list &rArr; is_network_compatible &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
</UL>

<P><STRONG><a name="[493]"></a>lbs_adhoc_start</STRONG> (Thumb, 284 bytes, Stack size 208 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_basic_rate_flags
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
</UL>

<P><STRONG><a name="[494]"></a>assoc_helper_essid</STRONG> (Thumb, 624 bytes, Stack size 32 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = assoc_helper_essid &rArr; lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
</UL>

<P><STRONG><a name="[496]"></a>assoc_helper_associate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[497]"></a>assoc_helper_mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = assoc_helper_mode &rArr; lbs_set_snmp_mib &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[499]"></a>assoc_helper_channel</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = assoc_helper_channel &rArr; lbs_update_channel &rArr; lbs_get_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_channel
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_channel
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[49d]"></a>assoc_helper_wep_keys</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = assoc_helper_wep_keys &rArr; lbs_cmd_802_11_set_wep &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4a0]"></a>assoc_helper_secinfo</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = assoc_helper_secinfo &rArr; lbs_cmd_802_11_enable_rsn &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_enable_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4a2]"></a>assoc_helper_wpa_keys</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = assoc_helper_wpa_keys &rArr; lbs_cmd_802_11_key_material &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4a5]"></a>assoc_helper_wpa_ie</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = assoc_helper_wpa_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4a7]"></a>lbs_find_best_ssid_in_list</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lbs_find_best_ssid_in_list &rArr; is_network_compatible &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
</UL>

<P><STRONG><a name="[4a8]"></a>lbs_find_best_network_ssid</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lbs_find_best_network_ssid &rArr; lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_ssid_in_list
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4aa]"></a>should_deauth_infrastructure</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = should_deauth_infrastructure &rArr; test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4ab]"></a>should_stop_adhoc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = should_stop_adhoc &rArr; lbs_ssid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[4ac]"></a>init_marvel_adhoc_assoc</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, assoc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_marvel_adhoc_assoc &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>

<P><STRONG><a name="[4b1]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[4b2]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, if_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[4b3]"></a>if_sdio_read_scratch</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = if_sdio_read_scratch &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_rx_len
</UL>

<P><STRONG><a name="[4b4]"></a>if_sdio_read_rx_len</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = if_sdio_read_rx_len &rArr; if_sdio_read_scratch &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[4b5]"></a>if_sdio_handle_cmd</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = if_sdio_handle_cmd &rArr; lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[4b7]"></a>if_sdio_handle_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[4b9]"></a>if_sdio_card_to_host</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_data
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_cmd
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_rx_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>

<P><STRONG><a name="[4ba]"></a>if_sdio_host_to_card_worker</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = if_sdio_host_to_card_worker &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
</UL>

<P><STRONG><a name="[18f]"></a>if_sdio_host_to_card</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = if_sdio_host_to_card &rArr; if_sdio_host_to_card_worker &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(.text)
</UL>
<P><STRONG><a name="[4be]"></a>if_sdio_prog_helper</STRONG> (Thumb, 314 bytes, Stack size 120 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = if_sdio_prog_helper &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
</UL>

<P><STRONG><a name="[4bf]"></a>if_sdio_prog_real</STRONG> (Thumb, 354 bytes, Stack size 568 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
</UL>

<P><STRONG><a name="[4c0]"></a>if_sdio_prog_firmware</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, if_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[4c7]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[4c8]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, marvell_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[4d3]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[4d5]"></a>list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_move_tail
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[4d4]"></a>list_move_tail</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_move_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
</UL>

<P><STRONG><a name="[4d6]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[4e1]"></a>lbs_scan_create_channel_list</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lbs_scan_create_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[4d7]"></a>lbs_scan_add_ssid_tlv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lbs_scan_add_ssid_tlv
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[4d8]"></a>lbs_scan_add_chanlist_tlv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lbs_scan_add_chanlist_tlv
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[4de]"></a>lbs_scan_add_rates_tlv</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[4da]"></a>lbs_unset_basic_rate_flags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
</UL>

<P><STRONG><a name="[4d9]"></a>lbs_process_bss</STRONG> (Thumb, 1374 bytes, Stack size 80 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lbs_process_bss &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_unset_basic_rate_flags
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
</UL>

<P><STRONG><a name="[190]"></a>lbs_ret_80211_scan</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lbs_ret_80211_scan &rArr; lbs_process_bss &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bss_descriptor
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_move_tail
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(.text)
</UL>
<P><STRONG><a name="[4dd]"></a>lbs_do_scan</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_rates_tlv
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_chanlist_tlv
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_ssid_tlv
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[4e0]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[4dc]"></a>clear_bss_descriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_bss_descriptor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[4db]"></a>is_same_network</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_same_network &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
</UL>

<P><STRONG><a name="[4e5]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, marvel_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[4e9]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marvel_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[4e6]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, marvel_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[4ec]"></a>lbs_init_adapter</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = lbs_init_adapter &rArr; lbs_allocate_cmd_buffer &rArr; lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
</UL>

<P><STRONG><a name="[4f0]"></a>lbs_setup_firmware</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, marvel_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = lbs_setup_firmware &rArr; lbs_update_hw_spec &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_tx_power
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
</UL>

<P><STRONG><a name="[4ed]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, marvel_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[4f7]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[4f8]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[4f9]"></a>DeliveryPacket</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4fa]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[4fb]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[503]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
</UL>

<P><STRONG><a name="[501]"></a>list_del</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[50f]"></a>is_command_allowed_in_ps</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[4fc]"></a>__lbs_cleanup_and_insert_cmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cleanup_and_insert_cmd
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>

<P><STRONG><a name="[4fe]"></a>lbs_cleanup_and_insert_cmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[4ff]"></a>lbs_get_cmd_ctrl_node</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lbs_get_cmd_ctrl_node
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[502]"></a>lbs_queue_cmd</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lbs_queue_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[510]"></a>lbs_submit_command</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lbs_submit_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[504]"></a>__lbs_cmd_async</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __lbs_cmd_async &rArr; lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_PTR
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>

<P><STRONG><a name="[191]"></a>lbs_cmd_async_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(.text)
</UL>
<P><STRONG><a name="[50c]"></a>lbs_ret_reg_access</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lbs_ret_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[50d]"></a>lbs_ret_802_11_rssi</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_ret_802_11_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[50e]"></a>lbs_ret_802_11_bcn_ctrl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[50b]"></a>handle_cmd_response</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handle_cmd_response &rArr; lbs_ret_reg_access
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_802_11_bcn_ctrl
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_802_11_rssi
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_reg_access
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_command_response
</UL>

<P><STRONG><a name="[513]"></a>lbs_cmd_802_11_ps_mode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[514]"></a>lbs_cmd_reg_access</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_cmd_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[515]"></a>lbs_cmd_802_11_monitor_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lbs_cmd_802_11_monitor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[516]"></a>lbs_cmd_802_11_rssi</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[511]"></a>lbs_cmd_bt_access</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lbs_cmd_bt_access &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[512]"></a>lbs_cmd_fwt_access</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lbs_cmd_fwt_access
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[517]"></a>lbs_cmd_bcn_ctrl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lbs_cmd_bcn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[519]"></a>set_one_wpa_key</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_one_wpa_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
</UL>

<P><STRONG><a name="[4fd]"></a>list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>

<P><STRONG><a name="[500]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[51a]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[51b]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[51c]"></a>lbs_region_2_code</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lbs_region_2_code &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
</UL>

<P><STRONG><a name="[521]"></a>lbs_code_2_region</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_generate_parsed_region_chan_11d
</UL>

<P><STRONG><a name="[524]"></a>lbs_get_chan_11d</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lbs_get_chan_11d
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
</UL>

<P><STRONG><a name="[51e]"></a>lbs_channel_known_11d</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_scan_type_11d
</UL>

<P><STRONG><a name="[51f]"></a>generate_domain_info_11d</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = generate_domain_info_11d &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_create_dnld_countryinfo_11d
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[520]"></a>lbs_generate_parsed_region_chan_11d</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, 11d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_code_2_region
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_create_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[522]"></a>lbs_region_chan_supported_11d</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lbs_region_chan_supported_11d &rArr; lbs_get_region_cfp_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
</UL>

<P><STRONG><a name="[523]"></a>parse_domain_info_11d</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = parse_domain_info_11d &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_chan_supported_11d
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_chan_11d
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[526]"></a>set_domain_info_11d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, 11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; _hx_printf &rArr; _hx_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_create_dnld_countryinfo_11d
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[52a]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, marvelif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hx_printf
</UL>

<P><STRONG><a name="[52b]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, marvelif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[194]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
