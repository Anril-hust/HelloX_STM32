<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj&Lst\HXV176.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj&Lst\HXV176.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sat May 10 15:27:19 2014
<BR><P>
<H3>Maximum Stack Usage =       1288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
format &rArr; Fat32Format &rArr; InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[231]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d5]">NMI_Handler</a><BR>
 <LI><a href="#[d6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d6]">HardFault_Handler</a><BR>
 <LI><a href="#[d7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d7]">MemManage_Handler</a><BR>
 <LI><a href="#[d8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8]">BusFault_Handler</a><BR>
 <LI><a href="#[d9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d9]">UsageFault_Handler</a><BR>
 <LI><a href="#[da]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">SVC_Handler</a><BR>
 <LI><a href="#[db]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[db]">DebugMon_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f0]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">AddFileSystem</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[33]">AddReadyKernelThread</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[55]">Allocate</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[54]">AppendBuffer</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[10]">AppendDevice</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[79]">BeginInitialize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[11d]">BeginScheduleHook</a> from statcpu.o(.text) referenced from statcpu.o(.text)
 <LI><a href="#[d8]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f3]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f4]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[201]">CalculateThread</a> from fibonacci.o(.text) referenced from fibonacci.o(.text)
 <LI><a href="#[31]">CallThreadHook</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[40]">CancelSleep</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[84]">CancelTimer</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[12]">CheckPortRegion</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[c9]">ClsHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[c8]">ComDebug</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[130]">ComIntHandler</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[9]">ConChangeLine</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[6]">ConClearScreen</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[8]">ConGotoHome</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[a]">ConGotoPrev</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[3]">ConInitialize</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[7]">ConPrintCh</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[b]">ConPrintLine</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[5]">ConPrintStr</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[114]">ConReadThread</a> from console.o(.text) referenced from console.o(.text)
 <LI><a href="#[4]">ConUninitialize</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[81]">ConnectInterrupt</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[bf]">CpuHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[52]">CreateBuffer1</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[53]">CreateBuffer2</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[2a]">CreateDevice</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[11c]">CreateHook</a> from statcpu.o(.text) referenced from statcpu.o(.text)
 <LI><a href="#[35]">CreateKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[70]">CreateObject</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e9]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ea]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[eb]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ec]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ed]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ee]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ef]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[db]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[115]">DefaultDrvDispatch</a> from iomgr.o(.text) referenced from iomgr.o(.text)
 <LI><a href="#[116]">DefaultOpen</a> from iomgr.o(.text) referenced from iomgr.o(.text)
 <LI><a href="#[11]">DeleteDevice</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[11a]">DeleteFromQueue</a> from objqueue.o(.text) referenced from objqueue.o(.text)
 <LI><a href="#[59]">DestroyBuffer</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[2b]">DestroyDevice</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[36]">DestroyKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[73]">DestroyObject</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e]">DevMgrInitialize</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[6c]">DevObjInitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6d]">DevObjUninitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[18]">DimInitialize</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[82]">DisconnectInterrupt</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[80]">DispatchException</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[7f]">DispatchInterrupt</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[77]">DoStat</a> from statcpu.o(.text) referenced 2 times from statcpu.o(.data)
 <LI><a href="#[6e]">DrcbInitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6f]">DrcbUninitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6a]">DrvObjInitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[6b]">DrvObjUninitialize</a> from iomgr2.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e4]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[106]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e5]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e6]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e7]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e8]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f5]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7a]">EndInitialize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[11e]">EndScheduleHook</a> from statcpu.o(.text) referenced from statcpu.o(.text)
 <LI><a href="#[135]">EventHandler</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[62]">EventInitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[63]">EventUninitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e2]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[87]">Fibonacci</a> from fibonacci.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[56]">Free</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[c5]">GUIHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[109]">GeneralIntHandler</a> from system.o(.text) referenced from osadapt.o(.text)
 <LI><a href="#[57]">GetBufferFlag</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[7c]">GetClockTickCounter</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[4f]">GetControlBlockFlag</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[4f]">GetControlBlockFlag</a> from mem_fbl.o(.text) referenced from mem_fbl.o(.text)
 <LI><a href="#[42]">GetCurrentIRQL</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[f]">GetDevice</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[72]">GetFirstObjectByType</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[75]">GetFirstThreadStat</a> from statcpu.o(.text) referenced 2 times from statcpu.o(.data)
 <LI><a href="#[11b]">GetHeaderElement</a> from objqueue.o(.text) referenced from objqueue.o(.text)
 <LI><a href="#[43]">GetLastError</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[76]">GetNextThreadStat</a> from statcpu.o(.text) referenced 2 times from statcpu.o(.data)
 <LI><a href="#[71]">GetObjectByID</a> from objmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[7e]">GetPhysicalMemorySize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[32]">GetScheduleKernelThread</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[7d]">GetSysTick</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[45]">GetThreadID</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[3d]">GetThreadPriority</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[46]">GetThreadStatus</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[d6]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[be]">HlpHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[88]">Hypertrm</a> from hypertrm.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[89]">Hyptrm2</a> from hypertrm.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[fe]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fd]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[100]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[ff]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">IOControl</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[19]">IOManagerInitialize</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[51]">InitBufferMgr</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[5b]">InitModule</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[50]">Initialize</a> from mem_fbl.o(.text) referenced 4 times from mem_fbl.o(.data)
 <LI><a href="#[119]">InsertIntoQueue</a> from objqueue.o(.text) referenced from objqueue.o(.text)
 <LI><a href="#[132]">IntRecv</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[131]">IntSend</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[10d]">Int_Entry_Wrapper</a> from osadapt.o(.text) referenced 2 times from osadapt.o(.text)
 <LI><a href="#[68]">InterruptInitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[69]">InterruptUninitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[c2]">IoCtrlApp</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[133]">IoCtrlStart</a> from ioctrl_s.o(.text) referenced from shell.o(.text)
 <LI><a href="#[60]">KernelThreadInitialize</a> from ktmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[34]">KernelThreadMgrInit</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[61]">KernelThreadUninitialize</a> from ktmgr.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[118]">KernelThreadWrapper</a> from ktmgr2.o(.text) referenced from ktmgr.o(.text)
 <LI><a href="#[136]">LEDDeviceWrite</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[86]">LEDDrvEntry</a> from led.o(.text) referenced 2 times from drventry.o(.data)
 <LI><a href="#[2d]">LoadDriver</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[5d]">LoadExternalMod</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[c4]">LoadappHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[4d]">LockKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[bb]">MemHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[d7]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">MgrGetMessage</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[4a]">MgrPeekMessage</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[48]">MgrSendMessage</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[5a]">ModMgrInit</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[4c]">MsgQueueEmpty</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[4b]">MsgQueueFull</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[128]">MultiWaitTimerHandler</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[64]">MutexInitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[65]">MutexUninitialize</a> from synobj.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[d5]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17f]">OnCancel</a> from iomgr2.o(.text) referenced from iomgr2.o(.text)
 <LI><a href="#[17e]">OnCompletion</a> from iomgr2.o(.text) referenced from iomgr2.o(.text)
 <LI><a href="#[df]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[dc]">PendSV_Handler</a> from osadapt.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12f]">PollRecv</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[12e]">PollSend</a> from hypertrm.o(.text) referenced from hypertrm.o(.text)
 <LI><a href="#[c7]">Poweroff</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[5e]">PriQueueInitialize</a> from objqueue.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[5f]">PriQueueUninitialize</a> from objqueue.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[e3]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[107]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e1]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c6]">Reboot</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[2f]">RegisterFileSystem</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[126]">ReleaseMutex</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[14]">ReleasePortRegion</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[5c]">ReplaceShell</a> from modmgr.o(.text) referenced 2 times from modmgr.o(.data)
 <LI><a href="#[13]">ReservePortRegion</a> from devmgr.o(.text) referenced 2 times from devmgr.o(.data)
 <LI><a href="#[2c]">ReserveResource</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[122]">ResetEvent</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[d4]">Reset_Handler</a> from osadapt.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">ResumeKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[c1]">RunTimeHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[101]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[102]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[da]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">ScheduleFromInt</a> from osadapt.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[39]">ScheduleFromProc</a> from osadapt.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[15]">SendDeviceMessage</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[58]">SetBufferFlag</a> from mem_fbl.o(.text) referenced 2 times from mem_fbl.o(.data)
 <LI><a href="#[41]">SetCurrentIRQL</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[121]">SetEvent</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[16]">SetFocusThread</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[44]">SetLastError</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[17]">SetShellThread</a> from dim.o(.text) referenced 2 times from dim.o(.data)
 <LI><a href="#[30]">SetThreadHook</a> from ktmgr2.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[3c]">SetThreadPriority</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[47]">SetThreadStatus</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[83]">SetTimer</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[12d]">ShellEntryPoint</a> from shell.o(.text) referenced from os_entry.o(.text)
 <LI><a href="#[78]">ShowStat</a> from statcpu.o(.text) referenced 2 times from statcpu.o(.data)
 <LI><a href="#[3f]">Sleep</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[c0]">SptHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[12c]">StatThreadRoutine</a> from stat_s.o(.text) referenced from os_entry.o(.text)
 <LI><a href="#[37]">SuspendKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[c3]">SysDiagApp</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[134]">SysDiagStart</a> from sysd_s.o(.text) referenced from shell.o(.text)
 <LI><a href="#[bc]">SysInfoHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[bd]">SysNameHandler</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[dd]">SysTick_Handler</a> from osadapt.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12a]">SyscallHandler</a> from syscall.o(.text) referenced from system.o(.text)
 <LI><a href="#[12b]">SystemIdle</a> from idle.o(.text) referenced from os_entry.o(.text)
 <LI><a href="#[10a]">SystemInit</a> from system_stm32f10x.o(.text) referenced 2 times from osadapt.o(.text)
 <LI><a href="#[7b]">SystemInitialize</a> from system.o(.text) referenced 2 times from system.o(.data)
 <LI><a href="#[10b]">System_Hard_Init</a> from osadapt.o(.text) referenced from osadapt.o(.text)
 <LI><a href="#[e0]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f6]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f9]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f8]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f7]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fa]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fb]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[fc]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11f]">TerminalHook</a> from statcpu.o(.text) referenced from statcpu.o(.text)
 <LI><a href="#[3e]">TerminalKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[66]">TimerInitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[129]">TimerInterruptHandler</a> from system.o(.text) referenced from system.o(.text)
 <LI><a href="#[67]">TimerUninitialize</a> from system.o(.text) referenced 2 times from objmgr.o(.data)
 <LI><a href="#[8e]">TurnLightOff</a> from ledctrl.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[8d]">TurnLightOn</a> from ledctrl.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[103]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[104]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[105]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[108]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f1]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f2]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">UniSchedule</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[3b]">UniSchedule</a> from ktmgr.o(.text) referenced from osadapt.o(.text)
 <LI><a href="#[4e]">UnlockKernelThread</a> from ktmgr.o(.text) referenced 2 times from ktmgr.o(.data)
 <LI><a href="#[d9]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10f]">UsartDestroy</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[113]">UsartDeviceClose</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[112]">UsartDeviceOpen</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[111]">UsartDeviceRead</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[110]">UsartDeviceWrite</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[85]">UsartDrvEntry</a> from usart.o(.text) referenced 2 times from drventry.o(.data)
 <LI><a href="#[10e]">UsartIntHandler</a> from usart.o(.text) referenced from usart.o(.text)
 <LI><a href="#[ba]">VerHandler</a> from shell1.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[de]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17d]">WaitForCompletion</a> from iomgr2.o(.text) referenced from iomgr2.o(.text)
 <LI><a href="#[124]">WaitForEventObject</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[123]">WaitForEventObjectEx</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[117]">WaitForKernelThreadObject</a> from ktmgr2.o(.text) referenced from ktmgr.o(.text)
 <LI><a href="#[125]">WaitForMutexObject</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[127]">WaitForMutexObjectEx</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[120]">WaitingTimerHandler</a> from synobj.o(.text) referenced from synobj.o(.text)
 <LI><a href="#[1d]">_CloseFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1e]">_CreateDirectory</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1a]">_CreateFile</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1f]">_DeleteFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[20]">_FindClose</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[21]">_FindFirstFile</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[22]">_FindNextFile</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[29]">_FlushFileBuffers</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[23]">_GetFileAttributes</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[24]">_GetFileSize</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1b]">_ReadFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[25]">_RemoveDirectory</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[26]">_SetEndOfFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[28]">_SetFilePointer</a> from iomgr.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[1c]">_WriteFile</a> from iomgr2.o(.text) referenced 2 times from iomgr.o(.data)
 <LI><a href="#[139]">__main</a> from __main.o(!!!main) referenced 2 times from osadapt.o(.text)
 <LI><a href="#[138]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[137]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[cb]">beep</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[9a]">cd</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[cd]">cintperf</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[a2]">copy</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[d0]">cpuload</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[9e]">del</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[cf]">devinfo</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[d1]">devlist</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[99]">dir</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[8f]">disklist</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[96]">exit</a> from fdisk.o(.text) referenced 8 times from fdisk.o(.data)
 <LI><a href="#[8a]">fdiskEntry</a> from fdisk.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[93]">format</a> from fdisk2.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[8b]">fsEntry</a> from fs.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[98]">fslist</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[c]">getch</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[d]">getchar</a> from console.o(.text) referenced 2 times from console.o(.data)
 <LI><a href="#[8c]">heditEntry</a> from hedit.o(.text) referenced 2 times from extcmd.o(.data)
 <LI><a href="#[97]">help</a> from fdisk.o(.text) referenced 8 times from fdisk.o(.data)
 <LI><a href="#[a6]">inputb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[a8]">inputd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[a9]">inputsb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[aa]">inputsw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[a7]">inputw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[9c]">md</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[b6]">memalloc</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[ca]">memcheck</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[b3]">memrb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b5]">memrd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b7]">memrels</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b4]">memrw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b0]">memwb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b2]">memwd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[b1]">memww</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[9d]">mkdir</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[ab]">outputb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[ad]">outputd</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[ae]">outputsb</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[af]">outputsw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[ac]">outputw</a> from ioctrl_s.o(.text) referenced 2 times from ioctrl_s.o(.data)
 <LI><a href="#[cc]">overload</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[94]">partadd</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[95]">partdel</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[91]">partlist</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[ce]">pcilist</a> from sysd_s.o(.text) referenced 2 times from sysd_s.o(.data)
 <LI><a href="#[92]">pdevlist</a> from fdisk.o(.text) referenced 2 times from fdisk.o(.data)
 <LI><a href="#[9f]">rd</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[a0]">ren</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[a1]">type</a> from fs.o(.text) referenced 2 times from fs.o(.data)
 <LI><a href="#[90]">use</a> from fdisk.o(.text) referenced 4 times from fdisk.o(.data)
 <LI><a href="#[9b]">vl</a> from fs.o(.text) referenced 2 times from fs.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[139]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[233]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[234]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[235]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[236]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[237]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[13d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[22d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[13f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[141]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[143]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[238]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[148]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[239]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[240]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[241]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[242]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[243]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[244]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[245]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[246]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[247]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[248]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[249]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[24d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[24e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[24f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[250]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[251]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[252]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[13b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[253]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[145]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[147]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[254]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[149]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __OS_Entry &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[255]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[232]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[256]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[14e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1d4]"></a>HardwareInitialize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, arch_stm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginInitialize
</UL>

<P><STRONG><a name="[257]"></a>EnableVMM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>InitKernelThreadContext</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
</UL>

<P><STRONG><a name="[197]"></a>__GetTsc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoStat
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndScheduleHook
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginScheduleHook
</UL>

<P><STRONG><a name="[20b]"></a>__MicroDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
</UL>

<P><STRONG><a name="[258]"></a>__outd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__ind</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__outb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort2
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort
</UL>

<P><STRONG><a name="[16e]"></a>__inb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIntHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
</UL>

<P><STRONG><a name="[215]"></a>__inw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
</UL>

<P><STRONG><a name="[216]"></a>__outw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputw
</UL>

<P><STRONG><a name="[25a]"></a>__inws</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__outws</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_stm.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>PrintStr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoHandler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[1e8]"></a>ClearScreen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[1cf]"></a>PrintCh</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InProcess
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
</UL>

<P><STRONG><a name="[1e0]"></a>GotoHome</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GotoHome
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoHandler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[1e1]"></a>ChangeLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoHandler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[1f1]"></a>GotoPrev</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GotoPrev
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
</UL>

<P><STRONG><a name="[156]"></a>ErrorHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ErrorHandler &rArr; InformErrorHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InformErrorHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmErrorHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImportantErrorHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CriticalErrorHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatalErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[157]"></a>__BUG</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniSchedule
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchInterrupt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimeOutWaiting
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiWaitTimerHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelWait
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainAllObjects
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitThisObject
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitingTimerHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUninitialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventUninitialize
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadHook
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallThreadHook
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReadyKernelThread
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIntHandler
</UL>

<P><STRONG><a name="[10b]"></a>System_Hard_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osadapt.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>Int_Entry_Wrapper</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> osadapt.o(.text)
<LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>Enter_Critical_Section</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrcbInitialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFileSystem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFileAttributes
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindClose
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNextFile
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFirstFile
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenFile
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterFileSystem
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShellThread
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocusThread
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceMessage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPortRegion
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceClose
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceOpen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniSchedule
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterruptHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObject
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMutex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObject
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitingTimerHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHook
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHook
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderElement
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFromQueue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoQueue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUninitialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventUninitialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForKernelThreadObject
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadHook
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelThreadWrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockKernelThread
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKernelThread
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrPeekMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrGetMessage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrSendMessage
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadPriority
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMemInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[166]"></a>Leave_Critical_Section</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrcbInitialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFileSystem
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFileAttributes
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindClose
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNextFile
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFirstFile
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenFile
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterFileSystem
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetShellThread
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFocusThread
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceMessage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPortRegion
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceClose
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceOpen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniSchedule
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterruptHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObject
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMutex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObject
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitingTimerHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHook
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHook
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderElement
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFromQueue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoQueue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUninitialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventUninitialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForKernelThreadObject
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadHook
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelThreadWrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockKernelThread
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKernelThread
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrPeekMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrGetMessage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrSendMessage
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadPriority
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMemInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[1d6]"></a>EnableInterrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInitialize
</UL>

<P><STRONG><a name="[1d5]"></a>DisableInterrupt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginInitialize
</UL>

<P><STRONG><a name="[3a]"></a>ScheduleFromInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>ScheduleFromProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>PendSV_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>SysTick_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osadapt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osadapt.o(.text)
<LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[25c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>SER_PutChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>

<P><STRONG><a name="[15d]"></a>SER_PutString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDrvEntry
</UL>

<P><STRONG><a name="[85]"></a>UsartDrvEntry</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UsartDrvEntry &rArr; InitializeUsart
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeUsart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drventry.o(.data)
</UL>
<P><STRONG><a name="[17d]"></a>WaitForCompletion</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForCompletion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr2.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>OnCompletion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnCompletion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr2.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>OnCancel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr2.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>DrcbInitialize</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrcbInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>DrcbUninitialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrcbUninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>DrvObjInitialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>DrvObjUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>DevObjInitialize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>DevObjUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>CreateNewFile</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateNewFile
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[1c]"></a>_WriteFile</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>_ReadFile</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _ReadFile &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>_CloseFile</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _CloseFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>_DeleteFile</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DeleteFile
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>_RemoveDirectory</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _RemoveDirectory
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>_SetEndOfFile</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, iomgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetEndOfFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1a8]"></a>CreateKernelThread</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateKernelThread
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[1a9]"></a>DestroyKernelThread</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyKernelThread
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[1aa]"></a>SetLastError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ab]"></a>GetLastError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ac]"></a>GetThreadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetThreadID
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ad]"></a>SetThreadPriority</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetThreadPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ae]"></a>GetMessage</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
</UL>

<P><STRONG><a name="[1af]"></a>SendMessage</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1b0]"></a>Sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1b1]"></a>SetTimer</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1b2]"></a>CancelTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1b3]"></a>CreateEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[1b4]"></a>DestroyEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
</UL>

<P><STRONG><a name="[1b5]"></a>SetEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
</UL>

<P><STRONG><a name="[1b6]"></a>ResetEvent</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[1b7]"></a>CreateMutex</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1b8]"></a>DestroyMutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1b9]"></a>ReleaseMutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReleaseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ba]"></a>WaitForThisObject</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForThisObject
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[1bb]"></a>WaitForThisObjectEx</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForThisObjectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte2
</UL>

<P><STRONG><a name="[1bc]"></a>ConnectInterrupt</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConnectInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[1bd]"></a>DisconnectInterrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisconnectInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[1be]"></a>VirtualAlloc</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VirtualAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1bf]"></a>VirtualFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[191]"></a>CreateFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CreateFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOff
</UL>

<P><STRONG><a name="[192]"></a>ReadFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
</UL>

<P><STRONG><a name="[1c0]"></a>WriteFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOff
</UL>

<P><STRONG><a name="[193]"></a>CloseFile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOff
</UL>

<P><STRONG><a name="[1c1]"></a>CreateDirectory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CreateDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c2]"></a>DeleteFile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeleteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c3]"></a>FindFirstFile</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindFirstFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c4]"></a>FindNextFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FindNextFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c5]"></a>FindClose</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FindClose
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c6]"></a>GetFileAttributes</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFileAttributes
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c7]"></a>GetFileSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetFileSize
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c8]"></a>RemoveDirectory</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RemoveDirectory
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1c9]"></a>SetEndOfFile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEndOfFile
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1ca]"></a>IOControl</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IOControl
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1cb]"></a>SetFilePointer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFilePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1cc]"></a>FlushFileBuffers</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlushFileBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[1cd]"></a>CreateDevice</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDrvEntry
</UL>

<P><STRONG><a name="[1ce]"></a>DestroyDevice</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[212]"></a>CreateRingBuff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateRingBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[211]"></a>GetRingBuffElement</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRingBuffElement
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
</UL>

<P><STRONG><a name="[210]"></a>AddRingBuffElement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddRingBuffElement
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIntHandler
</UL>

<P><STRONG><a name="[25d]"></a>SetRingBuffLength</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kapi.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>DestroyRingBuff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DestroyRingBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[183]"></a>Find0String</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Find0String
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>

<P><STRONG><a name="[184]"></a>SetBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>

<P><STRONG><a name="[185]"></a>UpdateMaxBlock</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UpdateMaxBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kFree
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>

<P><STRONG><a name="[182]"></a>_4kAllocate</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMaxBlock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find0String
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>

<P><STRONG><a name="[186]"></a>_4kFree</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMaxBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>

<P><STRONG><a name="[171]"></a>KMemAlloc</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMgrInitialize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHook
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoQueue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateObject
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
</UL>

<P><STRONG><a name="[173]"></a>KMemFree</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, kmemmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4kFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeRegion
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHook
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderElement
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFromQueue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PriQueueUninitialize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyObject
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrels
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
</UL>

<P><STRONG><a name="[25e]"></a>GetFreeMemorySize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmemmgr.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>GetTotalMemorySize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kmemmgr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>KernelThreadInitialize</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KernelThreadInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>KernelThreadUninitialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KernelThreadUninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>UniSchedule</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UniSchedule &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 2]<UL><LI> osadapt.o(.text)
<LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[21b]"></a>DispatchMessage</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DispatchMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
</UL>

<P><STRONG><a name="[32]"></a>GetScheduleKernelThread</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetScheduleKernelThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>AddReadyKernelThread</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AddReadyKernelThread &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>SetThreadHook</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetThreadHook &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>CallThreadHook</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CallThreadHook &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[118]"></a>KernelThreadWrapper</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KernelThreadWrapper
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>WaitForKernelThreadObject</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ktmgr2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForKernelThreadObject
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>PriQueueInitialize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, objqueue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>PriQueueUninitialize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PriQueueUninitialize &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>TimeOutWaiting</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimeOutWaiting &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMutexObjectEx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForEventObjectEx
</UL>

<P><STRONG><a name="[62]"></a>EventInitialize</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>EventUninitialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventUninitialize &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>MutexInitialize</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MutexInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>MutexUninitialize</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MutexUninitialize &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[1a5]"></a>WaitForMultipleObjects</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAny
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSynObject
</UL>

<P><STRONG><a name="[1d0]"></a>RegisterSystemCall</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegisterSystemCall
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[12a]"></a>SyscallHandler</STRONG> (Thumb, 1374 bytes, Stack size 48 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SyscallHandler &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileSize
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileAttributes
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindClose
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextFile
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstFile
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDirectory
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualFree
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualAlloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseMutex
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyMutex
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMutex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyEvent
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEvent
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTimer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetThreadPriority
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetThreadID
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLastError
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSystemCall
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchToModule
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyDevice
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushFileBuffers
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilePointer
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControl
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEndOfFile
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveDirectory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>InterruptInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>InterruptUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>TimerInitialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>TimerUninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>GeneralIntHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GeneralIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osadapt.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>u64Add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoStat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndScheduleHook
</UL>

<P><STRONG><a name="[198]"></a>u64Sub</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoStat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndScheduleHook
</UL>

<P><STRONG><a name="[260]"></a>EqualTo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>LessThan</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>MoreThan</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>u64RotateLeft</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>u64RotateRight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, types.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>u64Div</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoStat
</UL>

<P><STRONG><a name="[1d7]"></a>u64Hex2Str</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = u64Hex2Str &rArr; Hex2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
</UL>

<P><STRONG><a name="[12b]"></a>SystemIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, idle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_entry.o(.text)
</UL>
<P><STRONG><a name="[265]"></a>memcpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stdio.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>

<P><STRONG><a name="[196]"></a>memzero</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memzero &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateHook
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d9]"></a>vsprintf</STRONG> (Thumb, 854 bytes, Stack size 72 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iaddr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eaddr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[1df]"></a>sprintf</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1ef]"></a>StrCmp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StrCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[179]"></a>StrLen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[159]"></a>Hex2Str</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Hex2Str
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrb
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
</UL>

<P><STRONG><a name="[1e4]"></a>Int2Str</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[151]"></a>PrintLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InformErrorHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmErrorHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImportantErrorHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CriticalErrorHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatalErrorHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultExcepHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchInterrupt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultIntHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModMgrInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devinfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDevInfo
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcilist
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDevInfo
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overload
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStatInfo
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDevList
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMemInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HlpHandler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPrompt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SptHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagApp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlApp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDebug
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memww
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrels
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputsb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRecv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSend
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fslist
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatusage
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partaddusage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partlist
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdevlist
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPartDev
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disklist
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDisk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLightOff
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[17a]"></a>StrCpy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disklist
</UL>

<P><STRONG><a name="[1e2]"></a>ConvertToUper</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>

<P><STRONG><a name="[18c]"></a>Str2Hex</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertToUper
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchModDesc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devinfo
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;overload
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memww
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memwb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrels
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputw
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inputb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[1e3]"></a>FormString</STRONG> (Thumb, 230 bytes, Stack size 36 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDevInfo
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDevInfo
</UL>

<P><STRONG><a name="[1e6]"></a>atol</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = atol
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1e5]"></a>atoi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = atoi &rArr; atol
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[190]"></a>ToCapital</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[1e7]"></a>__OS_Entry</STRONG> (Thumb, 450 bytes, Stack size 80 bytes, os_entry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __OS_Entry &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeadLoop
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>main</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_entry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; __OS_Entry &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8a]"></a>fdiskEntry</STRONG> (Thumb, 188 bytes, Stack size 288 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = fdiskEntry &rArr; CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>format</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = format &rArr; Fat32Format &rArr; InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatusage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[201]"></a>CalculateThread</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fibonacci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculateThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fibonacci.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>Fibonacci</STRONG> (Thumb, 328 bytes, Stack size 112 bytes, fibonacci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Fibonacci &rArr; CreateKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Str
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>fsEntry</STRONG> (Thumb, 204 bytes, Stack size 288 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = fsEntry &rArr; CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>heditEntry</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = heditEntry &rArr; __UserInput &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__VersionInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__UserInput
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEditFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>Hypertrm</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hypertrm &rArr; WaitForThisObject
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyEvent
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>Hyptrm2</STRONG> (Thumb, 784 bytes, Stack size 112 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Hyptrm2 &rArr; CreateKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisconnectInterrupt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectInterrupt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObject
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyEvent
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateEvent
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyKernelThread
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateKernelThread
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyRingBuff
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRingBuff
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComPort2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>IoCtrlStart</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IoCtrlStart &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[1ee]"></a>FormParameterObj</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[1f0]"></a>ReleaseParameterObj</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReleaseParameterObj &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
</UL>

<P><STRONG><a name="[218]"></a>DefaultHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DefaultHandler &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[12d]"></a>ShellEntryPoint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShellEntryPoint &rArr; PrintPrompt &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPrompt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_entry.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>VerHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerHandler &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>MemHandler</STRONG> (Thumb, 166 bytes, Stack size 304 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = MemHandler &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>SysInfoHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysInfoHandler &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>HlpHandler</STRONG> (Thumb, 1206 bytes, Stack size 72 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HlpHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>LoadappHandler</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LoadappHandler &rArr; LoadBinModule &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteBinModule
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>GUIHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUIHandler &rArr; LoadappHandler &rArr; LoadBinModule &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>StatThreadRoutine</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, stat_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = StatThreadRoutine &rArr; ShowMemInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStatInfo
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDevList
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMemInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_entry.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>SysDiagStart</STRONG> (Thumb, 192 bytes, Stack size 288 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = SysDiagStart &rArr; CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandParser
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>LEDDrvEntry</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LEDDrvEntry &rArr; CreateDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDevice
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drventry.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[231]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8d]"></a>TurnLightOn</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TurnLightOn &rArr; WriteFile
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>TurnLightOff</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ledctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TurnLightOff &rArr; WriteFile
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extcmd.o(.data)
</UL>
<P><STRONG><a name="[18a]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultExcepHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchInterrupt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultIntHandler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModMgrInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStatInfo
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowDevList
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMemInfo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTimeHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fslist
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partlist
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPartDev
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDisk
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[228]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[229]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[227]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[13e]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[140]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[266]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>__printf</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[18e]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[170]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintStr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDebug
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
</UL>

<P><STRONG><a name="[18f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFile
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBinModule
</UL>

<P><STRONG><a name="[22e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[267]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cintperf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[268]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fibonacci
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>

<P><STRONG><a name="[26e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[226]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[137]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[22f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[142]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[144]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[146]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[14b]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[271]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[272]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[273]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[150]"></a>FatalErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FatalErrorHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[152]"></a>CriticalErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CriticalErrorHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[153]"></a>ImportantErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ImportantErrorHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[154]"></a>AlarmErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AlarmErrorHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[155]"></a>InformErrorHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hellocn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InformErrorHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[15c]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[15b]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16a]"></a>EnableTransferCompleteInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
</UL>

<P><STRONG><a name="[160]"></a>DisableTransferCompleteInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
</UL>

<P><STRONG><a name="[167]"></a>IsTransferCompleteInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[162]"></a>IsTransferEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LLSend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
</UL>

<P><STRONG><a name="[161]"></a>SendUsartByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LLSend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
</UL>

<P><STRONG><a name="[168]"></a>IsReceiveInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[165]"></a>IsDataAvailable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
</UL>

<P><STRONG><a name="[164]"></a>GetUsartByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
</UL>

<P><STRONG><a name="[16c]"></a>InitializeUsart</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitializeUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDrvEntry
</UL>

<P><STRONG><a name="[10f]"></a>UsartDestroy</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsartDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>TCIntHandler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TCIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUsartByte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransferEnable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableTransferCompleteInt
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[163]"></a>DAIntHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUsartByte
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAvailable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIntHandler
</UL>

<P><STRONG><a name="[10e]"></a>UsartIntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsartIntHandler &rArr; DAIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAIntHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCIntHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReceiveInt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransferCompleteInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>UsartDeviceRead</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartDeviceRead
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>__LLSend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __LLSend
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUsartByte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTransferEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
</UL>

<P><STRONG><a name="[16b]"></a>DeleteWriteDrcb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeleteWriteDrcb
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartDeviceWrite
</UL>

<P><STRONG><a name="[110]"></a>UsartDeviceWrite</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UsartDeviceWrite &rArr; __LLSend
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteWriteDrcb
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LLSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableTransferCompleteInt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>UsartDeviceOpen</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsartDeviceOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>UsartDeviceClose</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsartDeviceClose
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>__LL_Output</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConGotoPrev
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConChangeLine
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConGotoHome
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintCh
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintStr
</UL>

<P><STRONG><a name="[114]"></a>ConReadThread</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConReadThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>ConInitialize</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ConUninitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConUninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ConPrintStr</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConPrintStr &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ConClearScreen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, console.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ConPrintCh</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ConPrintCh &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ConGotoHome</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ConGotoHome &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ConChangeLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ConChangeLine &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ConGotoPrev</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ConGotoPrev &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_Output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ConPrintLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConPrintLine &rArr; ConPrintStr &rArr; __LL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConChangeLine
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConGotoHome
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConPrintStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>getch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>getchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, console.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>DevMgrInitialize</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DevMgrInitialize &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>InsertIntoList</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InsertIntoList
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePortRegion
</UL>

<P><STRONG><a name="[172]"></a>MergeRegion</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MergeRegion &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePortRegion
</UL>

<P><STRONG><a name="[13]"></a>ReservePortRegion</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReservePortRegion &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoList
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ReleasePortRegion</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ReleasePortRegion &rArr; MergeRegion &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeRegion
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertIntoList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CheckPortRegion</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckPortRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>DeviceIdMatch</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceIdMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevice
</UL>

<P><STRONG><a name="[f]"></a>GetDevice</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, devmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDevice &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceIdMatch
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>AppendDevice</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>DeleteDevice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, devmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devmgr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>DimInitialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DimInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>SendDeviceMessage</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendDeviceMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>SetFocusThread</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFocusThread
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>SetShellThread</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetShellThread
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dim.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>ToCapital</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateDirectory
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[2f]"></a>RegisterFileSystem</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegisterFileSystem
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>IOManagerInitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>__OpenFile</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __OpenFile
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[177]"></a>__OpenDevice</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __OpenDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFile
</UL>

<P><STRONG><a name="[1a]"></a>_CreateFile</STRONG> (Thumb, 224 bytes, Stack size 544 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _CreateFile &rArr; __OpenFile
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenDevice
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OpenFile
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>IOControl</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IOControl
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>_CreateDirectory</STRONG> (Thumb, 222 bytes, Stack size 552 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _CreateDirectory
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>_FindFirstFile</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FindFirstFile
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>_FindNextFile</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FindNextFile
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>_FindClose</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FindClose
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>_GetFileAttributes</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetFileAttributes
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>_GetFileSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>_SetFilePointer</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetFilePointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>_FlushFileBuffers</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _FlushFileBuffers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>CreateDevice</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CreateDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>DestroyDevice</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DestroyDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>DefaultDrvDispatch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>DefaultOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>LoadDriver</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>AddFileSystem</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, iomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddFileSystem
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ReserveResource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iomgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iomgr.o(.data)
</UL>
<P><STRONG><a name="[181]"></a>ToCapital</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, iomgr2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveDirectory
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteFile
</UL>

<P><STRONG><a name="[34]"></a>KernelThreadMgrInit</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KernelThreadMgrInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>CreateKernelThread</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CreateKernelThread &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKernelThreadContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>DestroyKernelThread</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DestroyKernelThread &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>SuspendKernelThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>ResumeKernelThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>SetThreadPriority</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetThreadPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>GetThreadPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>TerminalKernelThread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Sleep</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sleep &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>CancelSleep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>SetCurrentIRQL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>GetCurrentIRQL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>SetLastError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>GetLastError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>GetThreadID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>GetThreadStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>SetThreadStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>MsgQueueFull</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrSendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>MsgQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ktmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrPeekMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MgrGetMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>MgrSendMessage</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MgrSendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgQueueFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>MgrGetMessage</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MgrGetMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgQueueEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>MgrPeekMessage</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MgrPeekMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgQueueEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LockKernelThread</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LockKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>UnlockKernelThread</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ktmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnlockKernelThread
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktmgr.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>CreateBuffer1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>CreateBuffer2</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CreateBuffer2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>Allocate</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Allocate &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[189]"></a>CombineNeighbor</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CombineNeighbor
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
</UL>

<P><STRONG><a name="[188]"></a>ReleaseAndCombine</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineNeighbor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendBuffer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free
</UL>

<P><STRONG><a name="[56]"></a>Free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Free &rArr; ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>AppendBuffer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AppendBuffer &rArr; ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseAndCombine
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>GetBufferFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBufferFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>SetBufferFlag</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetBufferFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>DestroyBuffer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>GetControlBlockFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> mem_fbl.o(.text)
<LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>InitBufferMgr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mem_fbl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>Initialize</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mem_fbl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Initialize &rArr; AppendBuffer &rArr; ReleaseAndCombine &rArr; CombineNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem_fbl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>InitModule</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitModule
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModMgrInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>ModMgrInit</STRONG> (Thumb, 76 bytes, Stack size 144 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ModMgrInit &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModule
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>ReplaceShell</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modmgr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[18b]"></a>FetchModDesc</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FetchModDesc &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[18d]"></a>LoadModule</STRONG> (Thumb, 224 bytes, Stack size 224 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LoadModule &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[195]"></a>FetchLine</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FetchLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[194]"></a>IsLineValid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadExternalMod
</UL>

<P><STRONG><a name="[5d]"></a>LoadExternalMod</STRONG> (Thumb, 234 bytes, Stack size 208 bytes, modmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = LoadExternalMod &rArr; LoadModule &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLineValid
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchLine
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadModule
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FetchModDesc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modmgr.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>CreateObject</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CreateObject &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>GetObjectByID</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetObjectByID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>GetFirstObjectByType</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFirstObjectByType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>DestroyObject</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, objmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DestroyObject &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objmgr.o(.data)
</UL>
<P><STRONG><a name="[119]"></a>InsertIntoQueue</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InsertIntoQueue &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objqueue.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>DeleteFromQueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeleteFromQueue &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objqueue.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>GetHeaderElement</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, objqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetHeaderElement &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objqueue.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>CreateHook</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, statcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CreateHook &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>BeginScheduleHook</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, statcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BeginScheduleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetTsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>EndScheduleHook</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, statcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EndScheduleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetTsc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Add
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>TerminalHook</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, statcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TerminalHook &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>Initialize</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, statcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetTsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>GetFirstThreadStat</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, statcpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>GetNextThreadStat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, statcpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>ShowStat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statcpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>DoStat</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, statcpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DoStat
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetTsc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Div
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Add
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statcpu.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>WaitingTimerHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WaitingTimerHandler &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>WaitForEventObject</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForEventObject
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>WaitForEventObjectEx</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WaitForEventObjectEx &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>ResetEvent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ResetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>SetEvent</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>ReleaseMutex</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReleaseMutex
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>WaitForMutexObject</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitForMutexObject
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>WaitForMutexObjectEx</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitForMutexObjectEx &rArr; TimeOutWaiting &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutWaiting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[1a6]"></a>IsSynObject</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMultipleObjects
</UL>

<P><STRONG><a name="[19d]"></a>ObjectIsSignal</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTheseObjects
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectsAreSignal
</UL>

<P><STRONG><a name="[19c]"></a>ObjectsAreSignal</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectIsSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[19e]"></a>WaitThisObject</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTheseObjects
</UL>

<P><STRONG><a name="[19f]"></a>WaitTheseObjects</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitThisObject
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectIsSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1a0]"></a>ObtainAllObjects</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1a1]"></a>CancelWait</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CancelWait &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiWaitTimerHandler
</UL>

<P><STRONG><a name="[128]"></a>MultiWaitTimerHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, synobj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MultiWaitTimerHandler &rArr; CancelWait &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synobj.o(.text)
</UL>
<P><STRONG><a name="[1a2]"></a>MultiTimeOutWaiting</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1a4]"></a>ClearMultipleWaitStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForAll
</UL>

<P><STRONG><a name="[1a3]"></a>WaitForAll</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMultipleWaitStatus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiTimeOutWaiting
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObtainAllObjects
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTheseObjects
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjectsAreSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMultipleObjects
</UL>

<P><STRONG><a name="[1a7]"></a>WaitForAny</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, synobj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForMultipleObjects
</UL>

<P><STRONG><a name="[1d1]"></a>DispatchToModule</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DispatchToModule
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyscallHandler
</UL>

<P><STRONG><a name="[129]"></a>TimerInterruptHandler</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimerInterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>ConnectInterrupt</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConnectInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>DisconnectInterrupt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisconnectInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>SystemInitialize</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>GetClockTickCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>GetSysTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>GetPhysicalMemorySize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[1d2]"></a>DefaultIntHandler</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = DefaultIntHandler &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchInterrupt
</UL>

<P><STRONG><a name="[7f]"></a>DispatchInterrupt</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = DispatchInterrupt &rArr; DefaultIntHandler &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultIntHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>DefaultExcepHandler</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[80]"></a>DispatchException</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DispatchException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>SetTimer</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>CancelTimer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>BeginInitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BeginInitialize &rArr; HardwareInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>EndInitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EndInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>strnlen</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1da]"></a>skip_atoi</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1dc]"></a>number</STRONG> (Thumb, 344 bytes, Stack size 104 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1dd]"></a>eaddr</STRONG> (Thumb, 168 bytes, Stack size 52 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1de]"></a>iaddr</STRONG> (Thumb, 282 bytes, Stack size 52 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[1e9]"></a>DeadLoop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_entry.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_Entry
</UL>

<P><STRONG><a name="[1f7]"></a>LBAtoCHS</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LBAtoCHS
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[1ea]"></a>PrintPound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintPound &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
</UL>

<P><STRONG><a name="[1eb]"></a>ReadDeviceSector</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
</UL>

<P><STRONG><a name="[1ec]"></a>WriteDeviceSector</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[1ed]"></a>CommandParser</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdiskEntry
</UL>

<P><STRONG><a name="[96]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exit &rArr; memzero &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = help &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[1f2]"></a>DumpDisk</STRONG> (Thumb, 40 bytes, Stack size 272 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DumpDisk &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disklist
</UL>

<P><STRONG><a name="[8f]"></a>disklist</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = disklist &rArr; DumpDisk &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>DumpPartDev</STRONG> (Thumb, 42 bytes, Stack size 152 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = DumpPartDev &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdevlist
</UL>

<P><STRONG><a name="[92]"></a>pdevlist</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = pdevlist &rArr; DumpPartDev &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPartDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[1f4]"></a>IsValidPte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fdisk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use
</UL>

<P><STRONG><a name="[90]"></a>use</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = use &rArr; ReadDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidPte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>partlist</STRONG> (Thumb, 122 bytes, Stack size 280 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = partlist &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[1f5]"></a>partaddusage</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = partaddusage &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partadd
</UL>

<P><STRONG><a name="[94]"></a>partadd</STRONG> (Thumb, 354 bytes, Stack size 544 bytes, fdisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = partadd &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partaddusage
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LBAtoCHS
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>partdel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fdisk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fdisk.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>GetSecPerClus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fdisk2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
</UL>

<P><STRONG><a name="[1ff]"></a>FatSize32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FatSize32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
</UL>

<P><STRONG><a name="[1f8]"></a>ReadDeviceSector</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, fdisk2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>

<P><STRONG><a name="[1f9]"></a>WriteDeviceSector</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
</UL>

<P><STRONG><a name="[1fa]"></a>InProcess</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InProcess &rArr; PrintCh
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
</UL>

<P><STRONG><a name="[1fb]"></a>InitFat_Root</STRONG> (Thumb, 314 bytes, Stack size 568 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InProcess
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fat32Format
</UL>

<P><STRONG><a name="[1fc]"></a>formatusage</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = formatusage &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[1fd]"></a>Fat32Format</STRONG> (Thumb, 210 bytes, Stack size 552 bytes, fdisk2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = Fat32Format &rArr; InitFat_Root &rArr; WriteDeviceSector &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFat_Root
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InProcess
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDeviceSector
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatSize32
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecPerClus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[202]"></a>PrintPound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintPound &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
</UL>

<P><STRONG><a name="[203]"></a>CommandParser</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
</UL>

<P><STRONG><a name="[204]"></a>init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsEntry
</UL>

<P><STRONG><a name="[a4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exit &rArr; memzero &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = help &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>fslist</STRONG> (Thumb, 98 bytes, Stack size 112 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = fslist &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[205]"></a>PrintDir</STRONG> (Thumb, 46 bytes, Stack size 144 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = PrintDir &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir
</UL>

<P><STRONG><a name="[99]"></a>dir</STRONG> (Thumb, 124 bytes, Stack size 336 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dir &rArr; PrintDir &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDir
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>cd</STRONG> (Thumb, 198 bytes, Stack size 272 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = cd &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>md</STRONG> (Thumb, 82 bytes, Stack size 264 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = md &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>mkdir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mkdir &rArr; md &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>del</STRONG> (Thumb, 726 bytes, Stack size 272 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = del &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>rd</STRONG> (Thumb, 76 bytes, Stack size 272 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rd &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>ren</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>vl</STRONG> (Thumb, 172 bytes, Stack size 416 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = vl &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>type</STRONG> (Thumb, 244 bytes, Stack size 416 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = type &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCapital
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>copy</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = copy &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>use</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = use &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs.o(.data)
</UL>
<P><STRONG><a name="[208]"></a>CreateEditFile</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CreateEditFile
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
</UL>

<P><STRONG><a name="[206]"></a>__UserInput</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __UserInput &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
</UL>

<P><STRONG><a name="[207]"></a>__VersionInfo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __VersionInfo &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heditEntry
</UL>

<P><STRONG><a name="[209]"></a>InitComPort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitComPort
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hypertrm
</UL>

<P><STRONG><a name="[20a]"></a>ComSendByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MicroDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollSend
</UL>

<P><STRONG><a name="[20c]"></a>ComRecvByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MicroDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollRecv
</UL>

<P><STRONG><a name="[12e]"></a>PollSend</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PollSend &rArr; ComSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>PollRecv</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PollRecv &rArr; ComRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRecvByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>InitComPort2</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitComPort2
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hyptrm2
</UL>

<P><STRONG><a name="[20e]"></a>ComSendByte2</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hypertrm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>

<P><STRONG><a name="[20f]"></a>ComRecvByte2</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, hypertrm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetEvent
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
</UL>

<P><STRONG><a name="[130]"></a>ComIntHandler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ComIntHandler &rArr; __BUG &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BUG
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRingBuffElement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>IntSend</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntSend &rArr; GetMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEvent
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>IntRecv</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hypertrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IntRecv &rArr; WaitForThisObjectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForThisObjectEx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRingBuffElement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hypertrm.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>PrintPound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintPound &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCtrlStart
</UL>

<P><STRONG><a name="[a6]"></a>inputb</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inputb &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>inputw</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inputw &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>inputd</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inputd &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>inputsb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inputsb &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>inputsw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>outputb</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = outputb &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>outputw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = outputw &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>outputd</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = outputd &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>outputsb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>outputsw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>memalloc</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = memalloc &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>memrels</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = memrels &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>memwb</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = memwb &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>memww</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = memww &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>memwd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = memwd &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>memrb</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = memrb &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>memrw</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = memrw &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>memrd</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = memrd &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Str
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ioctrl_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = help &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ioctrl_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ioctrl_s.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>ComDebug</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ComDebug &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[217]"></a>SaveSysName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysNameHandler
</UL>

<P><STRONG><a name="[bd]"></a>SysNameHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SysNameHandler &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrLen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCpy
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSysName
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>IoCtrlApp</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IoCtrlApp &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>SysDiagApp</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysDiagApp &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>ClsHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClsHandler &rArr; ClearScreen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>Reboot</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Reboot &rArr; ClsHandler &rArr; ClearScreen
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>Poweroff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>RunTimeHandler</STRONG> (Thumb, 148 bytes, Stack size 232 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RunTimeHandler &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>CpuHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CpuHandler &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>SptHandler</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SptHandler &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[219]"></a>DoCommand</STRONG> (Thumb, 1022 bytes, Stack size 72 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DoCommand &rArr; DefaultHandler &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventHandler
</UL>

<P><STRONG><a name="[21a]"></a>PrintPrompt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PrintPrompt &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShellEntryPoint
</UL>

<P><STRONG><a name="[135]"></a>EventHandler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EventHandler &rArr; DoCommand &rArr; DefaultHandler &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoPrev
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPrompt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[21c]"></a>LoadBinModule</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoadBinModule &rArr; KMemFree &rArr; _4kFree &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KMemAlloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>

<P><STRONG><a name="[21d]"></a>ExecuteBinModule</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, shell1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ExecuteBinModule
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadappHandler
</UL>

<P><STRONG><a name="[21e]"></a>ShowMemInfo</STRONG> (Thumb, 166 bytes, Stack size 304 bytes, stat_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ShowMemInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatThreadRoutine
</UL>

<P><STRONG><a name="[21f]"></a>ShowDevList</STRONG> (Thumb, 64 bytes, Stack size 280 bytes, stat_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ShowDevList &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatThreadRoutine
</UL>

<P><STRONG><a name="[220]"></a>ShowStatInfo</STRONG> (Thumb, 120 bytes, Stack size 184 bytes, stat_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ShowStatInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatThreadRoutine
</UL>

<P><STRONG><a name="[221]"></a>PrintPound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintPound &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoHome
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCh
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagStart
</UL>

<P><STRONG><a name="[222]"></a>CommandParser</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CommandParser &rArr; FormParameterObj &rArr; KMemAlloc &rArr; _4kAllocate &rArr; UpdateMaxBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseParameterObj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormParameterObj
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDiagStart
</UL>

<P><STRONG><a name="[d2]"></a>exit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exit &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>memcheck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysd_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>help</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = help &rArr; PrintLine &rArr; ChangeLine
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>cintperf</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cintperf &rArr; u64Hex2Str &rArr; Hex2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_Critical_Section
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Critical_Section
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64Hex2Str
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>overload</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = overload &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>beep</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = beep &rArr; Str2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__inb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__outb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[223]"></a>OutputDevInfo</STRONG> (Thumb, 122 bytes, Stack size 128 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OutputDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcilist
</UL>

<P><STRONG><a name="[ce]"></a>pcilist</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pcilist &rArr; OutputDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDevInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[224]"></a>PrintDevInfo</STRONG> (Thumb, 800 bytes, Stack size 144 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PrintDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormString
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devinfo
</UL>

<P><STRONG><a name="[cf]"></a>devinfo</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = devinfo &rArr; PrintDevInfo &rArr; FormString &rArr; Int2Str
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Hex
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDevInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>cpuload</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpuload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>devlist</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sysd_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = devlist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysd_s.o(.data)
</UL>
<P><STRONG><a name="[225]"></a>InitLED</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDrvEntry
</UL>

<P><STRONG><a name="[136]"></a>LEDDeviceWrite</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LEDDeviceWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
