


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ************************
    2 00000000         ;* Author                : Garry
    3 00000000         ;* Date                  : Feb 15,2014
    4 00000000         ;* Last modified date    : Feb 15,2014
    5 00000000         ;* Last modified content :
    6 00000000         ;*                1.
    7 00000000         ;*                2.
    8 00000000         ;* Purpuse description:
    9 00000000         ;*     This file contains hardware level initialization 
                       or low level wraping code
   10 00000000         ;*   for operating system,before the entry of OS.
   11 00000000         ;*     All this routines are dedicated for STM32 chip,an
                       d certainly,Hello China
   12 00000000         ;*   Operating system.
   13 00000000         ;*
   14 00000000         ;*******************************************************
                       ************************
   15 00000000         
   16 00000000         
   17 00000000         ; Constants used in this file.
   18 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04
   19 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000
   20 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ;Set PendSV excepti
                                                            on as lowest priori
                                                            ty.
   21 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ;System priority re
                                                            gister.
   22 00000000         
   23 00000000         
   24 00000000         ; Code section.
   25 00000000                 PRESERVE8
   26 00000000                 THUMB
   27 00000000                 AREA             |.text|, CODE, READONLY
   28 00000000         
   29 00000000         
   30 00000000         ; Hardware initialization code,this routine should be ca
                       lled in Reset_Handler before
   31 00000000         ; any other initialization or application code.
   32 00000000         System_Hard_Init
                               PROC
   33 00000000                 EXPORT           System_Hard_Init
   34 00000000 481F            LDR              R0,=NVIC_SYSPRI14
   35 00000002 F04F 01FF       LDR              R1,=NVIC_PENDSV_PRI
   36 00000006 7001            STRB             R1,[R0]
   37 00000008 4770            BX               LR
   38 0000000A                 ENDP
   39 0000000A         
   40 0000000A         
   41 0000000A         ; Interrupt entry wrapper for Hello China OS.
   42 0000000A         ; A single entry point is adopted by Hello China operati



ARM Macro Assembler    Page 2 


                       ng system,which is GeneralIntHandler
   43 0000000A         ; in C language.This routine will dispatch each interrup
                       t or exception to it's handler
   44 0000000A         ; according to it's vector.This abstracted mechanism can
                        fit different hardwares.
   45 0000000A         ; But this mechanism is a little difference with STM32's
                        implementation,as call exception vector
   46 0000000A         ; directly.So any startup exception hander should call t
                       his routine first.
   47 0000000A         ; Here is the path of exception dispatch:
   48 0000000A         ;   Hardware -> NVIC -> STM32 Core -> Exception Handler 
                       -> Int_Entry_Wrapper -> Actual Handler
   49 0000000A         ; The pro-type of GeneralIntHandler is:
   50 0000000A         ;   void GeneralIntHandler(UCHAR ucVector,LPVOID lpESP);
                       
   51 0000000A         ; Int_Entry_Wrapper routine must transfer these 2 parame
                       ters to GeneralIntHandler.
   52 0000000A         ;
   53 0000000A         Int_Entry_Wrapper
                               PROC
   54 0000000A                 EXPORT           Int_Entry_Wrapper
   55 0000000A                 IMPORT           GeneralIntHandler ;Implemented 
                                                            in C file.
   56 0000000A F3EF 8005       MRS              R0,IPSR
   57 0000000E F000 00FF       AND              R0,R0,#0xFF
   58 00000012 F3EF 8108       MRS              R1,MSP
   59 00000016 4A1B            LDR              R2,=GeneralIntHandler
   60 00000018 4710            BX               R2          ;Exception return w
                                                            ill be performed in
                                                             GeneralIntHandler 
                                                            routine,
   61 0000001A         ;since BX(not BLX) is adopted here.
   62 0000001A                 ENDP
   63 0000001A         
   64 0000001A         ; Critical Section operation routines.They almost same a
                       s the implementation in x86 chip,
   65 0000001A         ; these 2 routines are refered by __ENTER_CRITICAL_SECTI
                       ON and __LEAVE_CRITICAL_SECTION
   66 0000001A         ; macros.
   67 0000001A         Enter_Critical_Section
                               PROC
   68 0000001A                 EXPORT           Enter_Critical_Section
   69 0000001A F3EF 8010       MRS              R0,PRIMASK
   70 0000001E B672            CPSID            I
   71 00000020 4770            BX               LR
   72 00000022                 ENDP
   73 00000022         
   74 00000022         Leave_Critical_Section
                               PROC
   75 00000022                 EXPORT           Leave_Critical_Section
   76 00000022 F380 8810       MSR              PRIMASK,R0
   77 00000026 4770            BX               LR
   78 00000028                 ENDP
   79 00000028         
   80 00000028         
   81 00000028         ; Interrupt enable and disable operation,which may used 
                       by OS kernel or hardware device.
   82 00000028         EnableInterrupt
                               PROC



ARM Macro Assembler    Page 3 


   83 00000028                 EXPORT           EnableInterrupt
   84 00000028 B662            CPSIE            I
   85 0000002A 4770            BX               LR
   86 0000002C                 ENDP
   87 0000002C         
   88 0000002C         DisableInterrupt
                               PROC
   89 0000002C                 EXPORT           DisableInterrupt
   90 0000002C B672            CPSID            I
   91 0000002E 4770            BX               LR
   92 00000030                 ENDP
   93 00000030         
   94 00000030         
   95 00000030         ; Kernel thread schedule primatives,which are called by 
                       OS kernel to lead kernel thread
   96 00000030         ; re-schedule.
   97 00000030         ; ScheduleFromInt is called under interrupt or exception
                        context,and as the name meaning,
   98 00000030         ; ScheduleFromProc is called under normal execution cont
                       ext.
   99 00000030         ScheduleFromInt
                               PROC
  100 00000030                 EXPORT           ScheduleFromInt
  101 00000030 B430            PUSH             {R4,R5}
  102 00000032 4C15            LDR              R4,=NVIC_INT_CTRL
  103 00000034 F04F 5580       LDR              R5,=NVIC_PENDSVSET ;Generate a 
                                                            PendSV exception.
  104 00000038 6025            STR              R5,[R4]
  105 0000003A BC30            POP              {R4,R5}
  106 0000003C 4770            BX               LR
  107 0000003E BF00            NOP
  108 00000040                 ENDP
  109 00000040         
  110 00000040         
  111 00000040         ScheduleFromProc
                               PROC
  112 00000040                 EXPORT           ScheduleFromProc
  113 00000040 B430            PUSH             {R4,R5}
  114 00000042 4C11            LDR              R4,=NVIC_INT_CTRL
  115 00000044 F04F 5580       LDR              R5,=NVIC_PENDSVSET ;Generate a 
                                                            PendSV exception.
  116 00000048 6025            STR              R5,[R4]
  117 0000004A BC30            POP              {R4,R5}
  118 0000004C 4770            BX               LR
  119 0000004E                 ENDP
  120 0000004E         
  121 0000004E         ; Handler of PendSV exception.All thread context saveing
                        and restoring
  122 0000004E         ; are performed in this handler,kernel thread schedule a
                       lso executed
  123 0000004E         ; under this routine.
  124 0000004E         ; ** NOTE **:
  125 0000004E         ;   This handler will replace the one created by compile
                       r in Startup file,
  126 0000004E         ; since that one is marked as weak.
  127 0000004E         PendSV_Handler
                               PROC
  128 0000004E                 EXPORT           PendSV_Handler
  129 0000004E                 IMPORT           UniSchedule ;UniSchedule is imp



ARM Macro Assembler    Page 4 


                                                            lemented in C file.
                                                            
  130 0000004E E92D 0FF0       PUSH             {R4-R11}    ;Save un-saved regi
                                                            sters.
  131 00000052 4674            MOV              R4,LR
  132 00000054 F3EF 8008       MRS              R0,MSP      ;Should be modified
                                                             to KernelThreadMan
                                                            ager.
  133 00000058 F3EF 8108       MRS              R1,MSP
  134 0000005C 4A0B            LDR              R2,=UniSchedule
  135 0000005E 4790            BLX              R2          ;Now R0 contains th
                                                            e new thread to swi
                                                            tch to.
  136 00000060 46A6            MOV              LR,R4
  137 00000062 F380 8808       MSR              MSP,R0
  138 00000066 E8BD 0FF0       POP              {R4-R11}
  139 0000006A 4770            BX               LR
  140 0000006C                 ENDP
  141 0000006C         
  142 0000006C         ;Customized system reset hander,to replace the one gener
                       ated by compiler.
  143 0000006C         ;Use this one will avoid the need to modify startup.S fi
                       le.
  144 0000006C         ;Please be noted this routine is declared as "STRONG"(wi
                       thout [WEAK] directive).
  145 0000006C         Reset_Handler
                               PROC
  146 0000006C                 EXPORT           Reset_Handler
  147 0000006C                 IMPORT           __main
  148 0000006C                 IMPORT           SystemInit
  149 0000006C 4808            LDR              R0, =SystemInit
  150 0000006E 4780            BLX              R0
  151 00000070 4808            LDR              R0, =System_Hard_Init
  152 00000072 4780            BLX              R0
  153 00000074 4808            LDR              R0, =__main
  154 00000076 4780            BLX              R0
  155 00000078                 ENDP
  156 00000078         
  157 00000078         
  158 00000078         ;Customized system tick handler,to replace the one gener
                       ated by compiler,since
  159 00000078         ;it is not described by [WEAK] directive.
  160 00000078         SysTick_Handler
                               PROC
  161 00000078                 EXPORT           SysTick_Handler
  162 00000078 4A08            LDR              R2,=Int_Entry_Wrapper
  163 0000007A 4710            BX               R2
  164 0000007C E7FE            B                .
  165 0000007E                 ENDP
  166 0000007E         
  167 0000007E 00 00           ALIGN
  168 00000080         
  169 00000080                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 5 


              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\obj&ls
t\osadapt.d -o.\obj&lst\osadapt.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\In
clude -IC:\Keil\ARM\Inc\ST\STM32F10x --list=.\obj&lst\osadapt.lst HXOS\arch\stm
32\osadapt.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 27 in file HXOS\arch\stm32\osadapt.S
   Uses
      None
Comment: .text unused
DisableInterrupt 0000002C

Symbol: DisableInterrupt
   Definitions
      At line 88 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 89 in file HXOS\arch\stm32\osadapt.S
Comment: DisableInterrupt used once
EnableInterrupt 00000028

Symbol: EnableInterrupt
   Definitions
      At line 82 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 83 in file HXOS\arch\stm32\osadapt.S
Comment: EnableInterrupt used once
Enter_Critical_Section 0000001A

Symbol: Enter_Critical_Section
   Definitions
      At line 67 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 68 in file HXOS\arch\stm32\osadapt.S
Comment: Enter_Critical_Section used once
Int_Entry_Wrapper 0000000A

Symbol: Int_Entry_Wrapper
   Definitions
      At line 53 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 54 in file HXOS\arch\stm32\osadapt.S
      At line 162 in file HXOS\arch\stm32\osadapt.S

Leave_Critical_Section 00000022

Symbol: Leave_Critical_Section
   Definitions
      At line 74 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 75 in file HXOS\arch\stm32\osadapt.S
Comment: Leave_Critical_Section used once
PendSV_Handler 0000004E

Symbol: PendSV_Handler
   Definitions
      At line 127 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 128 in file HXOS\arch\stm32\osadapt.S
Comment: PendSV_Handler used once
Reset_Handler 0000006C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Reset_Handler
   Definitions
      At line 145 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 146 in file HXOS\arch\stm32\osadapt.S
Comment: Reset_Handler used once
ScheduleFromInt 00000030

Symbol: ScheduleFromInt
   Definitions
      At line 99 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 100 in file HXOS\arch\stm32\osadapt.S
Comment: ScheduleFromInt used once
ScheduleFromProc 00000040

Symbol: ScheduleFromProc
   Definitions
      At line 111 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 112 in file HXOS\arch\stm32\osadapt.S
Comment: ScheduleFromProc used once
SysTick_Handler 00000078

Symbol: SysTick_Handler
   Definitions
      At line 160 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 161 in file HXOS\arch\stm32\osadapt.S
Comment: SysTick_Handler used once
System_Hard_Init 00000000

Symbol: System_Hard_Init
   Definitions
      At line 32 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 33 in file HXOS\arch\stm32\osadapt.S
      At line 151 in file HXOS\arch\stm32\osadapt.S

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 18 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 102 in file HXOS\arch\stm32\osadapt.S
      At line 114 in file HXOS\arch\stm32\osadapt.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 19 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 103 in file HXOS\arch\stm32\osadapt.S
      At line 115 in file HXOS\arch\stm32\osadapt.S

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 20 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 35 in file HXOS\arch\stm32\osadapt.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 21 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 34 in file HXOS\arch\stm32\osadapt.S
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GeneralIntHandler 00000000

Symbol: GeneralIntHandler
   Definitions
      At line 55 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 59 in file HXOS\arch\stm32\osadapt.S
Comment: GeneralIntHandler used once
SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 148 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 149 in file HXOS\arch\stm32\osadapt.S
Comment: SystemInit used once
UniSchedule 00000000

Symbol: UniSchedule
   Definitions
      At line 129 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 134 in file HXOS\arch\stm32\osadapt.S
Comment: UniSchedule used once
__main 00000000

Symbol: __main
   Definitions
      At line 147 in file HXOS\arch\stm32\osadapt.S
   Uses
      At line 153 in file HXOS\arch\stm32\osadapt.S
Comment: __main used once
4 symbols
352 symbols in table
